// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cluster.proto

/*
Package cluster is a generated protocol buffer package.

It is generated from these files:
	cluster.proto

It has these top-level messages:
*/
package cluster

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Cluster service

type ClusterService interface {
	// 1 创建集群 "/new_cluster"
	Newcluster(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 2 查询集群状态 "/queryCluster
	Querycluster(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 3 查询Dashboard状态 queryDashBoard
	Querydashboard(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 4 查询Nodelist queryNodelist
	Querynodelist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 5 查询Node详情 queryNodeDetail
	Querynodedetail(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 6 扩展集群 extendCluster
	Extendcluster(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 7 删除节点 deleteClusterNode
	Deleteclusternode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 8 检查节点 checknode
	Checknode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 9 获取节点状态 getnodestatue
	Getnodestatue(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 10集群状态 clusterstatus
	Clusterstatus(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type clusterService struct {
	c    client.Client
	name string
}

func NewClusterService(name string, c client.Client) ClusterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "cluster"
	}
	return &clusterService{
		c:    c,
		name: name,
	}
}

func (c *clusterService) Newcluster(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Cluster.Newcluster", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterService) Querycluster(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Cluster.Querycluster", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterService) Querydashboard(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Cluster.Querydashboard", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterService) Querynodelist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Cluster.Querynodelist", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterService) Querynodedetail(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Cluster.Querynodedetail", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterService) Extendcluster(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Cluster.Extendcluster", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterService) Deleteclusternode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Cluster.Deleteclusternode", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterService) Checknode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Cluster.Checknode", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterService) Getnodestatue(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Cluster.Getnodestatue", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterService) Clusterstatus(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Cluster.Clusterstatus", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterHandler interface {
	// 1 创建集群 "/new_cluster"
	Newcluster(context.Context, *go_api.Request, *go_api.Response) error
	// 2 查询集群状态 "/queryCluster
	Querycluster(context.Context, *go_api.Request, *go_api.Response) error
	// 3 查询Dashboard状态 queryDashBoard
	Querydashboard(context.Context, *go_api.Request, *go_api.Response) error
	// 4 查询Nodelist queryNodelist
	Querynodelist(context.Context, *go_api.Request, *go_api.Response) error
	// 5 查询Node详情 queryNodeDetail
	Querynodedetail(context.Context, *go_api.Request, *go_api.Response) error
	// 6 扩展集群 extendCluster
	Extendcluster(context.Context, *go_api.Request, *go_api.Response) error
	// 7 删除节点 deleteClusterNode
	Deleteclusternode(context.Context, *go_api.Request, *go_api.Response) error
	// 8 检查节点 checknode
	Checknode(context.Context, *go_api.Request, *go_api.Response) error
	// 9 获取节点状态 getnodestatue
	Getnodestatue(context.Context, *go_api.Request, *go_api.Response) error
	// 10集群状态 clusterstatus
	Clusterstatus(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterClusterHandler(s server.Server, hdlr ClusterHandler, opts ...server.HandlerOption) {
	type cluster interface {
		Newcluster(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Querycluster(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Querydashboard(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Querynodelist(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Querynodedetail(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Extendcluster(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Deleteclusternode(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Checknode(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Getnodestatue(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Clusterstatus(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type Cluster struct {
		cluster
	}
	h := &clusterHandler{hdlr}
	s.Handle(s.NewHandler(&Cluster{h}, opts...))
}

type clusterHandler struct {
	ClusterHandler
}

func (h *clusterHandler) Newcluster(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ClusterHandler.Newcluster(ctx, in, out)
}

func (h *clusterHandler) Querycluster(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ClusterHandler.Querycluster(ctx, in, out)
}

func (h *clusterHandler) Querydashboard(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ClusterHandler.Querydashboard(ctx, in, out)
}

func (h *clusterHandler) Querynodelist(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ClusterHandler.Querynodelist(ctx, in, out)
}

func (h *clusterHandler) Querynodedetail(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ClusterHandler.Querynodedetail(ctx, in, out)
}

func (h *clusterHandler) Extendcluster(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ClusterHandler.Extendcluster(ctx, in, out)
}

func (h *clusterHandler) Deleteclusternode(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ClusterHandler.Deleteclusternode(ctx, in, out)
}

func (h *clusterHandler) Checknode(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ClusterHandler.Checknode(ctx, in, out)
}

func (h *clusterHandler) Getnodestatue(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ClusterHandler.Getnodestatue(ctx, in, out)
}

func (h *clusterHandler) Clusterstatus(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ClusterHandler.Clusterstatus(ctx, in, out)
}
