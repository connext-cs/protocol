// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: nodegroup.proto

/*
Package nodegroup is a generated protocol buffer package.

It is generated from these files:
	nodegroup.proto

It has these top-level messages:
	Group
	GroupNodeCount
*/
package nodegroup

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Nodegroup service

type NodegroupService interface {
	// 1 分组查询 querygroup
	Querygroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 2 新建分组 addgroup
	Addgroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 3 修改分组 editgroup
	Editgroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 4 删除分组 deletegroup
	Deletegroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 5 添加分组节点 addgroudnode
	Addgroudnode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 6 查询所有node节点 queryallnode
	Queryallnode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 7 查询分组节点 querygroudnode
	Querygroudnode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 8 查询所有未关联分组节点 queryallnotrelatedgroupnode
	Queryallnotrelatedgroupnode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 9 分组查询 querygroup
	QueryGroupNodeCount(ctx context.Context, in *Group, opts ...client.CallOption) (*GroupNodeCount, error)
}

type nodegroupService struct {
	c    client.Client
	name string
}

func NewNodegroupService(name string, c client.Client) NodegroupService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "nodegroup"
	}
	return &nodegroupService{
		c:    c,
		name: name,
	}
}

func (c *nodegroupService) Querygroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Nodegroup.Querygroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupService) Addgroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Nodegroup.Addgroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupService) Editgroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Nodegroup.Editgroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupService) Deletegroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Nodegroup.Deletegroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupService) Addgroudnode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Nodegroup.Addgroudnode", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupService) Queryallnode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Nodegroup.Queryallnode", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupService) Querygroudnode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Nodegroup.Querygroudnode", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupService) Queryallnotrelatedgroupnode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Nodegroup.Queryallnotrelatedgroupnode", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodegroupService) QueryGroupNodeCount(ctx context.Context, in *Group, opts ...client.CallOption) (*GroupNodeCount, error) {
	req := c.c.NewRequest(c.name, "Nodegroup.QueryGroupNodeCount", in)
	out := new(GroupNodeCount)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nodegroup service

type NodegroupHandler interface {
	// 1 分组查询 querygroup
	Querygroup(context.Context, *go_api.Request, *go_api.Response) error
	// 2 新建分组 addgroup
	Addgroup(context.Context, *go_api.Request, *go_api.Response) error
	// 3 修改分组 editgroup
	Editgroup(context.Context, *go_api.Request, *go_api.Response) error
	// 4 删除分组 deletegroup
	Deletegroup(context.Context, *go_api.Request, *go_api.Response) error
	// 5 添加分组节点 addgroudnode
	Addgroudnode(context.Context, *go_api.Request, *go_api.Response) error
	// 6 查询所有node节点 queryallnode
	Queryallnode(context.Context, *go_api.Request, *go_api.Response) error
	// 7 查询分组节点 querygroudnode
	Querygroudnode(context.Context, *go_api.Request, *go_api.Response) error
	// 8 查询所有未关联分组节点 queryallnotrelatedgroupnode
	Queryallnotrelatedgroupnode(context.Context, *go_api.Request, *go_api.Response) error
	// 9 分组查询 querygroup
	QueryGroupNodeCount(context.Context, *Group, *GroupNodeCount) error
}

func RegisterNodegroupHandler(s server.Server, hdlr NodegroupHandler, opts ...server.HandlerOption) {
	type nodegroup interface {
		Querygroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Addgroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Editgroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Deletegroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Addgroudnode(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Queryallnode(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Querygroudnode(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Queryallnotrelatedgroupnode(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		QueryGroupNodeCount(ctx context.Context, in *Group, out *GroupNodeCount) error
	}
	type Nodegroup struct {
		nodegroup
	}
	h := &nodegroupHandler{hdlr}
	s.Handle(s.NewHandler(&Nodegroup{h}, opts...))
}

type nodegroupHandler struct {
	NodegroupHandler
}

func (h *nodegroupHandler) Querygroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NodegroupHandler.Querygroup(ctx, in, out)
}

func (h *nodegroupHandler) Addgroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NodegroupHandler.Addgroup(ctx, in, out)
}

func (h *nodegroupHandler) Editgroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NodegroupHandler.Editgroup(ctx, in, out)
}

func (h *nodegroupHandler) Deletegroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NodegroupHandler.Deletegroup(ctx, in, out)
}

func (h *nodegroupHandler) Addgroudnode(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NodegroupHandler.Addgroudnode(ctx, in, out)
}

func (h *nodegroupHandler) Queryallnode(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NodegroupHandler.Queryallnode(ctx, in, out)
}

func (h *nodegroupHandler) Querygroudnode(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NodegroupHandler.Querygroudnode(ctx, in, out)
}

func (h *nodegroupHandler) Queryallnotrelatedgroupnode(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NodegroupHandler.Queryallnotrelatedgroupnode(ctx, in, out)
}

func (h *nodegroupHandler) QueryGroupNodeCount(ctx context.Context, in *Group, out *GroupNodeCount) error {
	return h.NodegroupHandler.QueryGroupNodeCount(ctx, in, out)
}
