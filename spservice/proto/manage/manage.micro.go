// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: manage.proto

/*
Package manage is a generated protocol buffer package.

It is generated from these files:
	manage.proto

It has these top-level messages:
	HostNode
	DeployReq
	DeployRes
	DeleteReq
	DeleteRes
	HostNodeWithNoPass
	ConfigInfo
	StatueReq
	StatueRes
	LogReq
	LogRes
	KillReq
	KillRes
*/
package manage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Manage service

type ManageService interface {
	Deploy(ctx context.Context, in *DeployReq, opts ...client.CallOption) (*DeployRes, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*DeleteRes, error)
	Statue(ctx context.Context, in *StatueReq, opts ...client.CallOption) (*StatueRes, error)
	Log(ctx context.Context, in *LogReq, opts ...client.CallOption) (*LogRes, error)
	Kill(ctx context.Context, in *KillReq, opts ...client.CallOption) (*KillRes, error)
}

type manageService struct {
	c    client.Client
	name string
}

func NewManageService(name string, c client.Client) ManageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "manage"
	}
	return &manageService{
		c:    c,
		name: name,
	}
}

func (c *manageService) Deploy(ctx context.Context, in *DeployReq, opts ...client.CallOption) (*DeployRes, error) {
	req := c.c.NewRequest(c.name, "Manage.Deploy", in)
	out := new(DeployRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*DeleteRes, error) {
	req := c.c.NewRequest(c.name, "Manage.Delete", in)
	out := new(DeleteRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) Statue(ctx context.Context, in *StatueReq, opts ...client.CallOption) (*StatueRes, error) {
	req := c.c.NewRequest(c.name, "Manage.Statue", in)
	out := new(StatueRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) Log(ctx context.Context, in *LogReq, opts ...client.CallOption) (*LogRes, error) {
	req := c.c.NewRequest(c.name, "Manage.Log", in)
	out := new(LogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) Kill(ctx context.Context, in *KillReq, opts ...client.CallOption) (*KillRes, error) {
	req := c.c.NewRequest(c.name, "Manage.Kill", in)
	out := new(KillRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Manage service

type ManageHandler interface {
	Deploy(context.Context, *DeployReq, *DeployRes) error
	Delete(context.Context, *DeleteReq, *DeleteRes) error
	Statue(context.Context, *StatueReq, *StatueRes) error
	Log(context.Context, *LogReq, *LogRes) error
	Kill(context.Context, *KillReq, *KillRes) error
}

func RegisterManageHandler(s server.Server, hdlr ManageHandler, opts ...server.HandlerOption) {
	type manage interface {
		Deploy(ctx context.Context, in *DeployReq, out *DeployRes) error
		Delete(ctx context.Context, in *DeleteReq, out *DeleteRes) error
		Statue(ctx context.Context, in *StatueReq, out *StatueRes) error
		Log(ctx context.Context, in *LogReq, out *LogRes) error
		Kill(ctx context.Context, in *KillReq, out *KillRes) error
	}
	type Manage struct {
		manage
	}
	h := &manageHandler{hdlr}
	s.Handle(s.NewHandler(&Manage{h}, opts...))
}

type manageHandler struct {
	ManageHandler
}

func (h *manageHandler) Deploy(ctx context.Context, in *DeployReq, out *DeployRes) error {
	return h.ManageHandler.Deploy(ctx, in, out)
}

func (h *manageHandler) Delete(ctx context.Context, in *DeleteReq, out *DeleteRes) error {
	return h.ManageHandler.Delete(ctx, in, out)
}

func (h *manageHandler) Statue(ctx context.Context, in *StatueReq, out *StatueRes) error {
	return h.ManageHandler.Statue(ctx, in, out)
}

func (h *manageHandler) Log(ctx context.Context, in *LogReq, out *LogRes) error {
	return h.ManageHandler.Log(ctx, in, out)
}

func (h *manageHandler) Kill(ctx context.Context, in *KillReq, out *KillRes) error {
	return h.ManageHandler.Kill(ctx, in, out)
}
