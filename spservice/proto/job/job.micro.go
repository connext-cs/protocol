// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: job.proto

/*
Package job is a generated protocol buffer package.

It is generated from these files:
	job.proto

It has these top-level messages:
	CheckRunningManagerRequest
	CheckRunningManagerResponse
	CheckInitManagerRequest
	CheckInitManagerResponse
	CheckInitJobReq
	CheckInitJobReqRes
	CLusterNodeJobCheckInitReq
	CLusterNodeJobCheckInitRes
	CLusterNodeJobCheckTimeoutReq
	CLusterNodeJobCheckTimeoutRes
*/
package job

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Job service

type JobService interface {
	CheckRunningManager(ctx context.Context, in *CheckRunningManagerRequest, opts ...client.CallOption) (*CheckRunningManagerResponse, error)
	CheckInitManager(ctx context.Context, in *CheckInitManagerRequest, opts ...client.CallOption) (*CheckInitManagerResponse, error)
	CheckInitJob(ctx context.Context, in *CheckInitJobReq, opts ...client.CallOption) (*CheckInitJobReqRes, error)
	CLusterNodeJobCheckInit(ctx context.Context, in *CLusterNodeJobCheckInitReq, opts ...client.CallOption) (*CLusterNodeJobCheckInitRes, error)
	CLusterNodeJobCheckTimeout(ctx context.Context, in *CLusterNodeJobCheckTimeoutReq, opts ...client.CallOption) (*CLusterNodeJobCheckTimeoutRes, error)
}

type jobService struct {
	c    client.Client
	name string
}

func NewJobService(name string, c client.Client) JobService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "job"
	}
	return &jobService{
		c:    c,
		name: name,
	}
}

func (c *jobService) CheckRunningManager(ctx context.Context, in *CheckRunningManagerRequest, opts ...client.CallOption) (*CheckRunningManagerResponse, error) {
	req := c.c.NewRequest(c.name, "Job.CheckRunningManager", in)
	out := new(CheckRunningManagerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) CheckInitManager(ctx context.Context, in *CheckInitManagerRequest, opts ...client.CallOption) (*CheckInitManagerResponse, error) {
	req := c.c.NewRequest(c.name, "Job.CheckInitManager", in)
	out := new(CheckInitManagerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) CheckInitJob(ctx context.Context, in *CheckInitJobReq, opts ...client.CallOption) (*CheckInitJobReqRes, error) {
	req := c.c.NewRequest(c.name, "Job.CheckInitJob", in)
	out := new(CheckInitJobReqRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) CLusterNodeJobCheckInit(ctx context.Context, in *CLusterNodeJobCheckInitReq, opts ...client.CallOption) (*CLusterNodeJobCheckInitRes, error) {
	req := c.c.NewRequest(c.name, "Job.CLusterNodeJobCheckInit", in)
	out := new(CLusterNodeJobCheckInitRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) CLusterNodeJobCheckTimeout(ctx context.Context, in *CLusterNodeJobCheckTimeoutReq, opts ...client.CallOption) (*CLusterNodeJobCheckTimeoutRes, error) {
	req := c.c.NewRequest(c.name, "Job.CLusterNodeJobCheckTimeout", in)
	out := new(CLusterNodeJobCheckTimeoutRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Job service

type JobHandler interface {
	CheckRunningManager(context.Context, *CheckRunningManagerRequest, *CheckRunningManagerResponse) error
	CheckInitManager(context.Context, *CheckInitManagerRequest, *CheckInitManagerResponse) error
	CheckInitJob(context.Context, *CheckInitJobReq, *CheckInitJobReqRes) error
	CLusterNodeJobCheckInit(context.Context, *CLusterNodeJobCheckInitReq, *CLusterNodeJobCheckInitRes) error
	CLusterNodeJobCheckTimeout(context.Context, *CLusterNodeJobCheckTimeoutReq, *CLusterNodeJobCheckTimeoutRes) error
}

func RegisterJobHandler(s server.Server, hdlr JobHandler, opts ...server.HandlerOption) {
	type job interface {
		CheckRunningManager(ctx context.Context, in *CheckRunningManagerRequest, out *CheckRunningManagerResponse) error
		CheckInitManager(ctx context.Context, in *CheckInitManagerRequest, out *CheckInitManagerResponse) error
		CheckInitJob(ctx context.Context, in *CheckInitJobReq, out *CheckInitJobReqRes) error
		CLusterNodeJobCheckInit(ctx context.Context, in *CLusterNodeJobCheckInitReq, out *CLusterNodeJobCheckInitRes) error
		CLusterNodeJobCheckTimeout(ctx context.Context, in *CLusterNodeJobCheckTimeoutReq, out *CLusterNodeJobCheckTimeoutRes) error
	}
	type Job struct {
		job
	}
	h := &jobHandler{hdlr}
	s.Handle(s.NewHandler(&Job{h}, opts...))
}

type jobHandler struct {
	JobHandler
}

func (h *jobHandler) CheckRunningManager(ctx context.Context, in *CheckRunningManagerRequest, out *CheckRunningManagerResponse) error {
	return h.JobHandler.CheckRunningManager(ctx, in, out)
}

func (h *jobHandler) CheckInitManager(ctx context.Context, in *CheckInitManagerRequest, out *CheckInitManagerResponse) error {
	return h.JobHandler.CheckInitManager(ctx, in, out)
}

func (h *jobHandler) CheckInitJob(ctx context.Context, in *CheckInitJobReq, out *CheckInitJobReqRes) error {
	return h.JobHandler.CheckInitJob(ctx, in, out)
}

func (h *jobHandler) CLusterNodeJobCheckInit(ctx context.Context, in *CLusterNodeJobCheckInitReq, out *CLusterNodeJobCheckInitRes) error {
	return h.JobHandler.CLusterNodeJobCheckInit(ctx, in, out)
}

func (h *jobHandler) CLusterNodeJobCheckTimeout(ctx context.Context, in *CLusterNodeJobCheckTimeoutReq, out *CLusterNodeJobCheckTimeoutRes) error {
	return h.JobHandler.CLusterNodeJobCheckTimeout(ctx, in, out)
}
