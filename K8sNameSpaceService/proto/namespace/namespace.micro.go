// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: namespace.proto

package namespace

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Namespace service

type NamespaceService interface {
	Newparentproject(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Parentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Parentprojectlistdb(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Updateparentproject(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Delparentproject(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Queryparentproject(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Countparentprojectconfig(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Listparentprojectbynodeid(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Existparentprojectname(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Getparent(ctx context.Context, in *ParentID, opts ...client.CallOption) (*ParentItem, error)
	Listparentbynodeid(ctx context.Context, in *GroupID, opts ...client.CallOption) (*ParentList, error)
	ListParentProjectByType(ctx context.Context, in *ListParentProjectByTypeRequest, opts ...client.CallOption) (*ParentList, error)
	Addsafemanager(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Groupquerysafemanager(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Querysafemanagerbyid(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Updatesafemanager(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Deletesafemanager(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Addconfig(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Deleteconfig(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Updateconfig(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Queryconfig(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Queryconfigname(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Addparentprojectgroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Deleteparentprojectgroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Updateparentprojectgroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Deleteparentprojectgroupcheck(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Queryparentprojectgroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Listparentprojectgroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Rpclistparentprojectgroup(ctx context.Context, in *EmptyReq, opts ...client.CallOption) (*ParentGroupList, error)
	Gettestparentprojectid(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Userparentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	K8Suserparentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Vmuserparentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	K8Sunuseparentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Vmunuseparentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GetParentByGroupID(ctx context.Context, in *GetParentByGroupReq, opts ...client.CallOption) (*GetParentByGroupRes, error)
	RpcGetGroupListByParentList(ctx context.Context, in *ParentIDList, opts ...client.CallOption) (*ParentGroupList, error)
	RpcFuzzyListParent(ctx context.Context, in *FuzzyListParentReq, opts ...client.CallOption) (*ParentList, error)
	RpcFuzzyListParentGroup(ctx context.Context, in *FuzzyListParentGroupReq, opts ...client.CallOption) (*ParentGroupList, error)
	RpcFuzzyListAuthorizeParent(ctx context.Context, in *FuzzyListAuthorizeParentReq, opts ...client.CallOption) (*ParentList, error)
}

type namespaceService struct {
	c    client.Client
	name string
}

func NewNamespaceService(name string, c client.Client) NamespaceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "namespace"
	}
	return &namespaceService{
		c:    c,
		name: name,
	}
}

func (c *namespaceService) Newparentproject(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Newparentproject", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Parentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Parentprojectlist", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Parentprojectlistdb(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Parentprojectlistdb", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Updateparentproject(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Updateparentproject", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Delparentproject(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Delparentproject", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Queryparentproject(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Queryparentproject", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Countparentprojectconfig(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Countparentprojectconfig", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Listparentprojectbynodeid(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Listparentprojectbynodeid", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Existparentprojectname(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Existparentprojectname", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Getparent(ctx context.Context, in *ParentID, opts ...client.CallOption) (*ParentItem, error) {
	req := c.c.NewRequest(c.name, "Namespace.Getparent", in)
	out := new(ParentItem)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Listparentbynodeid(ctx context.Context, in *GroupID, opts ...client.CallOption) (*ParentList, error) {
	req := c.c.NewRequest(c.name, "Namespace.Listparentbynodeid", in)
	out := new(ParentList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) ListParentProjectByType(ctx context.Context, in *ListParentProjectByTypeRequest, opts ...client.CallOption) (*ParentList, error) {
	req := c.c.NewRequest(c.name, "Namespace.ListParentProjectByType", in)
	out := new(ParentList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Addsafemanager(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Addsafemanager", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Groupquerysafemanager(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Groupquerysafemanager", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Querysafemanagerbyid(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Querysafemanagerbyid", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Updatesafemanager(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Updatesafemanager", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Deletesafemanager(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Deletesafemanager", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Addconfig(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Addconfig", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Deleteconfig(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Deleteconfig", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Updateconfig(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Updateconfig", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Queryconfig(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Queryconfig", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Queryconfigname(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Queryconfigname", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Addparentprojectgroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Addparentprojectgroup", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Deleteparentprojectgroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Deleteparentprojectgroup", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Updateparentprojectgroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Updateparentprojectgroup", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Deleteparentprojectgroupcheck(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Deleteparentprojectgroupcheck", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Queryparentprojectgroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Queryparentprojectgroup", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Listparentprojectgroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Listparentprojectgroup", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Rpclistparentprojectgroup(ctx context.Context, in *EmptyReq, opts ...client.CallOption) (*ParentGroupList, error) {
	req := c.c.NewRequest(c.name, "Namespace.Rpclistparentprojectgroup", in)
	out := new(ParentGroupList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Gettestparentprojectid(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Gettestparentprojectid", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Userparentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Userparentprojectlist", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) K8Suserparentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.K8suserparentprojectlist", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Vmuserparentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Vmuserparentprojectlist", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) K8Sunuseparentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.K8sunuseparentprojectlist", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) Vmunuseparentprojectlist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Namespace.Vmunuseparentprojectlist", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) GetParentByGroupID(ctx context.Context, in *GetParentByGroupReq, opts ...client.CallOption) (*GetParentByGroupRes, error) {
	req := c.c.NewRequest(c.name, "Namespace.GetParentByGroupID", in)
	out := new(GetParentByGroupRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) RpcGetGroupListByParentList(ctx context.Context, in *ParentIDList, opts ...client.CallOption) (*ParentGroupList, error) {
	req := c.c.NewRequest(c.name, "Namespace.RpcGetGroupListByParentList", in)
	out := new(ParentGroupList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) RpcFuzzyListParent(ctx context.Context, in *FuzzyListParentReq, opts ...client.CallOption) (*ParentList, error) {
	req := c.c.NewRequest(c.name, "Namespace.RpcFuzzyListParent", in)
	out := new(ParentList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) RpcFuzzyListParentGroup(ctx context.Context, in *FuzzyListParentGroupReq, opts ...client.CallOption) (*ParentGroupList, error) {
	req := c.c.NewRequest(c.name, "Namespace.RpcFuzzyListParentGroup", in)
	out := new(ParentGroupList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) RpcFuzzyListAuthorizeParent(ctx context.Context, in *FuzzyListAuthorizeParentReq, opts ...client.CallOption) (*ParentList, error) {
	req := c.c.NewRequest(c.name, "Namespace.RpcFuzzyListAuthorizeParent", in)
	out := new(ParentList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Namespace service

type NamespaceHandler interface {
	Newparentproject(context.Context, *proto1.Request, *proto1.Response) error
	Parentprojectlist(context.Context, *proto1.Request, *proto1.Response) error
	Parentprojectlistdb(context.Context, *proto1.Request, *proto1.Response) error
	Updateparentproject(context.Context, *proto1.Request, *proto1.Response) error
	Delparentproject(context.Context, *proto1.Request, *proto1.Response) error
	Queryparentproject(context.Context, *proto1.Request, *proto1.Response) error
	Countparentprojectconfig(context.Context, *proto1.Request, *proto1.Response) error
	Listparentprojectbynodeid(context.Context, *proto1.Request, *proto1.Response) error
	Existparentprojectname(context.Context, *proto1.Request, *proto1.Response) error
	Getparent(context.Context, *ParentID, *ParentItem) error
	Listparentbynodeid(context.Context, *GroupID, *ParentList) error
	ListParentProjectByType(context.Context, *ListParentProjectByTypeRequest, *ParentList) error
	Addsafemanager(context.Context, *proto1.Request, *proto1.Response) error
	Groupquerysafemanager(context.Context, *proto1.Request, *proto1.Response) error
	Querysafemanagerbyid(context.Context, *proto1.Request, *proto1.Response) error
	Updatesafemanager(context.Context, *proto1.Request, *proto1.Response) error
	Deletesafemanager(context.Context, *proto1.Request, *proto1.Response) error
	Addconfig(context.Context, *proto1.Request, *proto1.Response) error
	Deleteconfig(context.Context, *proto1.Request, *proto1.Response) error
	Updateconfig(context.Context, *proto1.Request, *proto1.Response) error
	Queryconfig(context.Context, *proto1.Request, *proto1.Response) error
	Queryconfigname(context.Context, *proto1.Request, *proto1.Response) error
	Addparentprojectgroup(context.Context, *proto1.Request, *proto1.Response) error
	Deleteparentprojectgroup(context.Context, *proto1.Request, *proto1.Response) error
	Updateparentprojectgroup(context.Context, *proto1.Request, *proto1.Response) error
	Deleteparentprojectgroupcheck(context.Context, *proto1.Request, *proto1.Response) error
	Queryparentprojectgroup(context.Context, *proto1.Request, *proto1.Response) error
	Listparentprojectgroup(context.Context, *proto1.Request, *proto1.Response) error
	Rpclistparentprojectgroup(context.Context, *EmptyReq, *ParentGroupList) error
	Gettestparentprojectid(context.Context, *proto1.Request, *proto1.Response) error
	Userparentprojectlist(context.Context, *proto1.Request, *proto1.Response) error
	K8Suserparentprojectlist(context.Context, *proto1.Request, *proto1.Response) error
	Vmuserparentprojectlist(context.Context, *proto1.Request, *proto1.Response) error
	K8Sunuseparentprojectlist(context.Context, *proto1.Request, *proto1.Response) error
	Vmunuseparentprojectlist(context.Context, *proto1.Request, *proto1.Response) error
	GetParentByGroupID(context.Context, *GetParentByGroupReq, *GetParentByGroupRes) error
	RpcGetGroupListByParentList(context.Context, *ParentIDList, *ParentGroupList) error
	RpcFuzzyListParent(context.Context, *FuzzyListParentReq, *ParentList) error
	RpcFuzzyListParentGroup(context.Context, *FuzzyListParentGroupReq, *ParentGroupList) error
	RpcFuzzyListAuthorizeParent(context.Context, *FuzzyListAuthorizeParentReq, *ParentList) error
}

func RegisterNamespaceHandler(s server.Server, hdlr NamespaceHandler, opts ...server.HandlerOption) error {
	type namespace interface {
		Newparentproject(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Parentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Parentprojectlistdb(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Updateparentproject(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Delparentproject(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Queryparentproject(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Countparentprojectconfig(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Listparentprojectbynodeid(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Existparentprojectname(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Getparent(ctx context.Context, in *ParentID, out *ParentItem) error
		Listparentbynodeid(ctx context.Context, in *GroupID, out *ParentList) error
		ListParentProjectByType(ctx context.Context, in *ListParentProjectByTypeRequest, out *ParentList) error
		Addsafemanager(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Groupquerysafemanager(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Querysafemanagerbyid(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Updatesafemanager(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Deletesafemanager(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Addconfig(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Deleteconfig(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Updateconfig(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Queryconfig(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Queryconfigname(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Addparentprojectgroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Deleteparentprojectgroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Updateparentprojectgroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Deleteparentprojectgroupcheck(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Queryparentprojectgroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Listparentprojectgroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Rpclistparentprojectgroup(ctx context.Context, in *EmptyReq, out *ParentGroupList) error
		Gettestparentprojectid(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Userparentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		K8Suserparentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Vmuserparentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		K8Sunuseparentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Vmunuseparentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetParentByGroupID(ctx context.Context, in *GetParentByGroupReq, out *GetParentByGroupRes) error
		RpcGetGroupListByParentList(ctx context.Context, in *ParentIDList, out *ParentGroupList) error
		RpcFuzzyListParent(ctx context.Context, in *FuzzyListParentReq, out *ParentList) error
		RpcFuzzyListParentGroup(ctx context.Context, in *FuzzyListParentGroupReq, out *ParentGroupList) error
		RpcFuzzyListAuthorizeParent(ctx context.Context, in *FuzzyListAuthorizeParentReq, out *ParentList) error
	}
	type Namespace struct {
		namespace
	}
	h := &namespaceHandler{hdlr}
	return s.Handle(s.NewHandler(&Namespace{h}, opts...))
}

type namespaceHandler struct {
	NamespaceHandler
}

func (h *namespaceHandler) Newparentproject(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Newparentproject(ctx, in, out)
}

func (h *namespaceHandler) Parentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Parentprojectlist(ctx, in, out)
}

func (h *namespaceHandler) Parentprojectlistdb(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Parentprojectlistdb(ctx, in, out)
}

func (h *namespaceHandler) Updateparentproject(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Updateparentproject(ctx, in, out)
}

func (h *namespaceHandler) Delparentproject(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Delparentproject(ctx, in, out)
}

func (h *namespaceHandler) Queryparentproject(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Queryparentproject(ctx, in, out)
}

func (h *namespaceHandler) Countparentprojectconfig(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Countparentprojectconfig(ctx, in, out)
}

func (h *namespaceHandler) Listparentprojectbynodeid(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Listparentprojectbynodeid(ctx, in, out)
}

func (h *namespaceHandler) Existparentprojectname(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Existparentprojectname(ctx, in, out)
}

func (h *namespaceHandler) Getparent(ctx context.Context, in *ParentID, out *ParentItem) error {
	return h.NamespaceHandler.Getparent(ctx, in, out)
}

func (h *namespaceHandler) Listparentbynodeid(ctx context.Context, in *GroupID, out *ParentList) error {
	return h.NamespaceHandler.Listparentbynodeid(ctx, in, out)
}

func (h *namespaceHandler) ListParentProjectByType(ctx context.Context, in *ListParentProjectByTypeRequest, out *ParentList) error {
	return h.NamespaceHandler.ListParentProjectByType(ctx, in, out)
}

func (h *namespaceHandler) Addsafemanager(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Addsafemanager(ctx, in, out)
}

func (h *namespaceHandler) Groupquerysafemanager(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Groupquerysafemanager(ctx, in, out)
}

func (h *namespaceHandler) Querysafemanagerbyid(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Querysafemanagerbyid(ctx, in, out)
}

func (h *namespaceHandler) Updatesafemanager(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Updatesafemanager(ctx, in, out)
}

func (h *namespaceHandler) Deletesafemanager(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Deletesafemanager(ctx, in, out)
}

func (h *namespaceHandler) Addconfig(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Addconfig(ctx, in, out)
}

func (h *namespaceHandler) Deleteconfig(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Deleteconfig(ctx, in, out)
}

func (h *namespaceHandler) Updateconfig(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Updateconfig(ctx, in, out)
}

func (h *namespaceHandler) Queryconfig(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Queryconfig(ctx, in, out)
}

func (h *namespaceHandler) Queryconfigname(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Queryconfigname(ctx, in, out)
}

func (h *namespaceHandler) Addparentprojectgroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Addparentprojectgroup(ctx, in, out)
}

func (h *namespaceHandler) Deleteparentprojectgroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Deleteparentprojectgroup(ctx, in, out)
}

func (h *namespaceHandler) Updateparentprojectgroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Updateparentprojectgroup(ctx, in, out)
}

func (h *namespaceHandler) Deleteparentprojectgroupcheck(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Deleteparentprojectgroupcheck(ctx, in, out)
}

func (h *namespaceHandler) Queryparentprojectgroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Queryparentprojectgroup(ctx, in, out)
}

func (h *namespaceHandler) Listparentprojectgroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Listparentprojectgroup(ctx, in, out)
}

func (h *namespaceHandler) Rpclistparentprojectgroup(ctx context.Context, in *EmptyReq, out *ParentGroupList) error {
	return h.NamespaceHandler.Rpclistparentprojectgroup(ctx, in, out)
}

func (h *namespaceHandler) Gettestparentprojectid(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Gettestparentprojectid(ctx, in, out)
}

func (h *namespaceHandler) Userparentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Userparentprojectlist(ctx, in, out)
}

func (h *namespaceHandler) K8Suserparentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.K8Suserparentprojectlist(ctx, in, out)
}

func (h *namespaceHandler) Vmuserparentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Vmuserparentprojectlist(ctx, in, out)
}

func (h *namespaceHandler) K8Sunuseparentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.K8Sunuseparentprojectlist(ctx, in, out)
}

func (h *namespaceHandler) Vmunuseparentprojectlist(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.NamespaceHandler.Vmunuseparentprojectlist(ctx, in, out)
}

func (h *namespaceHandler) GetParentByGroupID(ctx context.Context, in *GetParentByGroupReq, out *GetParentByGroupRes) error {
	return h.NamespaceHandler.GetParentByGroupID(ctx, in, out)
}

func (h *namespaceHandler) RpcGetGroupListByParentList(ctx context.Context, in *ParentIDList, out *ParentGroupList) error {
	return h.NamespaceHandler.RpcGetGroupListByParentList(ctx, in, out)
}

func (h *namespaceHandler) RpcFuzzyListParent(ctx context.Context, in *FuzzyListParentReq, out *ParentList) error {
	return h.NamespaceHandler.RpcFuzzyListParent(ctx, in, out)
}

func (h *namespaceHandler) RpcFuzzyListParentGroup(ctx context.Context, in *FuzzyListParentGroupReq, out *ParentGroupList) error {
	return h.NamespaceHandler.RpcFuzzyListParentGroup(ctx, in, out)
}

func (h *namespaceHandler) RpcFuzzyListAuthorizeParent(ctx context.Context, in *FuzzyListAuthorizeParentReq, out *ParentList) error {
	return h.NamespaceHandler.RpcFuzzyListAuthorizeParent(ctx, in, out)
}
