// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: encrypt.proto

/*
Package encrypt is a generated protocol buffer package.

It is generated from these files:
	encrypt.proto

It has these top-level messages:
	QueryEncryptSaltReq
	QueryEncryptSaltRes
*/
package encrypt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Encrypt service

type EncryptService interface {
	QueryEncryptSalt(ctx context.Context, in *QueryEncryptSaltReq, opts ...client.CallOption) (*QueryEncryptSaltRes, error)
}

type encryptService struct {
	c    client.Client
	name string
}

func NewEncryptService(name string, c client.Client) EncryptService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "encrypt"
	}
	return &encryptService{
		c:    c,
		name: name,
	}
}

func (c *encryptService) QueryEncryptSalt(ctx context.Context, in *QueryEncryptSaltReq, opts ...client.CallOption) (*QueryEncryptSaltRes, error) {
	req := c.c.NewRequest(c.name, "Encrypt.QueryEncryptSalt", in)
	out := new(QueryEncryptSaltRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Encrypt service

type EncryptHandler interface {
	QueryEncryptSalt(context.Context, *QueryEncryptSaltReq, *QueryEncryptSaltRes) error
}

func RegisterEncryptHandler(s server.Server, hdlr EncryptHandler, opts ...server.HandlerOption) {
	type encrypt interface {
		QueryEncryptSalt(ctx context.Context, in *QueryEncryptSaltReq, out *QueryEncryptSaltRes) error
	}
	type Encrypt struct {
		encrypt
	}
	h := &encryptHandler{hdlr}
	s.Handle(s.NewHandler(&Encrypt{h}, opts...))
}

type encryptHandler struct {
	EncryptHandler
}

func (h *encryptHandler) QueryEncryptSalt(ctx context.Context, in *QueryEncryptSaltReq, out *QueryEncryptSaltRes) error {
	return h.EncryptHandler.QueryEncryptSalt(ctx, in, out)
}
