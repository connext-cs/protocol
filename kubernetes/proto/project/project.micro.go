// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: project.proto

/*
Package project is a generated protocol buffer package.

It is generated from these files:
	project.proto

It has these top-level messages:
	CreateProjectRequest
	CreateProjectResponse
	ReCreateProjectRequest
	ReCreateProjectResponse
	GetProjectStatusRequest
	GetProjectStatusResponse
	DeleteProjectRequest
	DeleteProjectResponse
	RollOutProjectRequest
	RollOutProjectResponse
	GetRollOutRevisionRequest
	GetRollOutRevisionResponse
	HistoryRevision
	StopProjectRequest
	StopProjectResponse
	GetPodlistRequest
	GetPodlistResponse
	GetDeploymentReplicasRequest
	GetDeploymentReplicasResponse
	SetDeploymentReplicasRequest
	SetDeploymentReplicasResponse
	CreateOrUpdateProjectExternalNetworkRequest
	CreateOrUpdateProjectExternalNetworkResponse
	UpdateServiceToExternalRequest
	UpdateServiceToExternalResponse
	DeleteProjectExternalNetworkRequest
	DeleteProjectExternalNetworkResponse
	UpdateServiceToInnerRequest
	UpdateServiceToInnerResponse
	CreateServiceRequest
	CreateServiceResponse
	DeleteServiceRequest
	DeleteServiceResponse
	UpdateServiceRequest
	UpdateServiceResponse
	CreateOrUpdateHPARequest
	CreateOrUpdateHPAResponse
	DeleteHPARequest
	DeleteHPAResponse
	ProjectPodItem
	ProInfo
	FluentdConfigmapInfo
	DeployInfo
	ServiceInfo
	NetworkExternal
	PodSeniorInfo
	ProjectLog
	EnvironmentVariable
	ProjectStorage
	ProjectConfig
	GetProjectEventRequest
	GetProjectEventResponse
	DeploymentEvent
	PodEvent
	PodStatus
*/
package project

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Project service

type ProjectService interface {
	// 发布项目
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...client.CallOption) (*CreateProjectResponse, error)
	// 重新发布项目
	ReCreateProject(ctx context.Context, in *ReCreateProjectRequest, opts ...client.CallOption) (*ReCreateProjectResponse, error)
	// 获取项目状态
	GetProjectStatus(ctx context.Context, in *GetProjectStatusRequest, opts ...client.CallOption) (*GetProjectStatusResponse, error)
	// 删除项目
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...client.CallOption) (*DeleteProjectResponse, error)
	// 回滚项目
	RollOutProject(ctx context.Context, in *RollOutProjectRequest, opts ...client.CallOption) (*RollOutProjectResponse, error)
	GetRollOutRevision(ctx context.Context, in *GetRollOutRevisionRequest, opts ...client.CallOption) (*GetRollOutRevisionResponse, error)
	// 停止项目
	StopProject(ctx context.Context, in *StopProjectRequest, opts ...client.CallOption) (*StopProjectResponse, error)
	// 获取pod列表
	GetPodlist(ctx context.Context, in *GetPodlistRequest, opts ...client.CallOption) (*GetPodlistResponse, error)
	// 获取项目运行副本数
	GetDeploymentReplicas(ctx context.Context, in *GetDeploymentReplicasRequest, opts ...client.CallOption) (*GetDeploymentReplicasResponse, error)
	// 设置项目需求副本数
	SetDeploymentReplicas(ctx context.Context, in *SetDeploymentReplicasRequest, opts ...client.CallOption) (*SetDeploymentReplicasResponse, error)
	// 获取项目事件信息
	GetProjectEvent(ctx context.Context, in *GetProjectEventRequest, opts ...client.CallOption) (*GetProjectEventResponse, error)
	// 创建或者更新外部网络
	CreateOrUpdateProjectExternalNetwork(ctx context.Context, in *CreateOrUpdateProjectExternalNetworkRequest, opts ...client.CallOption) (*CreateOrUpdateProjectExternalNetworkResponse, error)
	// 创建TCP外网
	UpdateServiceToExternal(ctx context.Context, in *UpdateServiceToExternalRequest, opts ...client.CallOption) (*UpdateServiceToExternalResponse, error)
	// 删除外网
	DeleteProjectExternalNetwork(ctx context.Context, in *DeleteProjectExternalNetworkRequest, opts ...client.CallOption) (*DeleteProjectExternalNetworkResponse, error)
	// 将TCP外网改成内网
	UpdateServiceToInner(ctx context.Context, in *UpdateServiceToInnerRequest, opts ...client.CallOption) (*UpdateServiceToInnerResponse, error)
	// 创建service
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...client.CallOption) (*CreateServiceResponse, error)
	// 删除service
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...client.CallOption) (*DeleteServiceResponse, error)
	// 更新service
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...client.CallOption) (*UpdateServiceResponse, error)
	// 更新project log type
	// rpc UpdateLogType(UpdateLogTypeRequest) returns (UpdateLogTypeResponse) {};
	// 更新 HPA
	CreateOrUpdateHPA(ctx context.Context, in *CreateOrUpdateHPARequest, opts ...client.CallOption) (*CreateOrUpdateHPAResponse, error)
	// 删除HPA
	DeleteHPA(ctx context.Context, in *DeleteHPARequest, opts ...client.CallOption) (*DeleteHPAResponse, error)
}

type projectService struct {
	c    client.Client
	name string
}

func NewProjectService(name string, c client.Client) ProjectService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "project"
	}
	return &projectService{
		c:    c,
		name: name,
	}
}

func (c *projectService) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...client.CallOption) (*CreateProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Project.CreateProject", in)
	out := new(CreateProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) ReCreateProject(ctx context.Context, in *ReCreateProjectRequest, opts ...client.CallOption) (*ReCreateProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Project.ReCreateProject", in)
	out := new(ReCreateProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) GetProjectStatus(ctx context.Context, in *GetProjectStatusRequest, opts ...client.CallOption) (*GetProjectStatusResponse, error) {
	req := c.c.NewRequest(c.name, "Project.GetProjectStatus", in)
	out := new(GetProjectStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...client.CallOption) (*DeleteProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Project.DeleteProject", in)
	out := new(DeleteProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) RollOutProject(ctx context.Context, in *RollOutProjectRequest, opts ...client.CallOption) (*RollOutProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Project.RollOutProject", in)
	out := new(RollOutProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) GetRollOutRevision(ctx context.Context, in *GetRollOutRevisionRequest, opts ...client.CallOption) (*GetRollOutRevisionResponse, error) {
	req := c.c.NewRequest(c.name, "Project.GetRollOutRevision", in)
	out := new(GetRollOutRevisionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) StopProject(ctx context.Context, in *StopProjectRequest, opts ...client.CallOption) (*StopProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Project.StopProject", in)
	out := new(StopProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) GetPodlist(ctx context.Context, in *GetPodlistRequest, opts ...client.CallOption) (*GetPodlistResponse, error) {
	req := c.c.NewRequest(c.name, "Project.GetPodlist", in)
	out := new(GetPodlistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) GetDeploymentReplicas(ctx context.Context, in *GetDeploymentReplicasRequest, opts ...client.CallOption) (*GetDeploymentReplicasResponse, error) {
	req := c.c.NewRequest(c.name, "Project.GetDeploymentReplicas", in)
	out := new(GetDeploymentReplicasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) SetDeploymentReplicas(ctx context.Context, in *SetDeploymentReplicasRequest, opts ...client.CallOption) (*SetDeploymentReplicasResponse, error) {
	req := c.c.NewRequest(c.name, "Project.SetDeploymentReplicas", in)
	out := new(SetDeploymentReplicasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) GetProjectEvent(ctx context.Context, in *GetProjectEventRequest, opts ...client.CallOption) (*GetProjectEventResponse, error) {
	req := c.c.NewRequest(c.name, "Project.GetProjectEvent", in)
	out := new(GetProjectEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) CreateOrUpdateProjectExternalNetwork(ctx context.Context, in *CreateOrUpdateProjectExternalNetworkRequest, opts ...client.CallOption) (*CreateOrUpdateProjectExternalNetworkResponse, error) {
	req := c.c.NewRequest(c.name, "Project.CreateOrUpdateProjectExternalNetwork", in)
	out := new(CreateOrUpdateProjectExternalNetworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) UpdateServiceToExternal(ctx context.Context, in *UpdateServiceToExternalRequest, opts ...client.CallOption) (*UpdateServiceToExternalResponse, error) {
	req := c.c.NewRequest(c.name, "Project.UpdateServiceToExternal", in)
	out := new(UpdateServiceToExternalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) DeleteProjectExternalNetwork(ctx context.Context, in *DeleteProjectExternalNetworkRequest, opts ...client.CallOption) (*DeleteProjectExternalNetworkResponse, error) {
	req := c.c.NewRequest(c.name, "Project.DeleteProjectExternalNetwork", in)
	out := new(DeleteProjectExternalNetworkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) UpdateServiceToInner(ctx context.Context, in *UpdateServiceToInnerRequest, opts ...client.CallOption) (*UpdateServiceToInnerResponse, error) {
	req := c.c.NewRequest(c.name, "Project.UpdateServiceToInner", in)
	out := new(UpdateServiceToInnerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...client.CallOption) (*CreateServiceResponse, error) {
	req := c.c.NewRequest(c.name, "Project.CreateService", in)
	out := new(CreateServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...client.CallOption) (*DeleteServiceResponse, error) {
	req := c.c.NewRequest(c.name, "Project.DeleteService", in)
	out := new(DeleteServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...client.CallOption) (*UpdateServiceResponse, error) {
	req := c.c.NewRequest(c.name, "Project.UpdateService", in)
	out := new(UpdateServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) CreateOrUpdateHPA(ctx context.Context, in *CreateOrUpdateHPARequest, opts ...client.CallOption) (*CreateOrUpdateHPAResponse, error) {
	req := c.c.NewRequest(c.name, "Project.CreateOrUpdateHPA", in)
	out := new(CreateOrUpdateHPAResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) DeleteHPA(ctx context.Context, in *DeleteHPARequest, opts ...client.CallOption) (*DeleteHPAResponse, error) {
	req := c.c.NewRequest(c.name, "Project.DeleteHPA", in)
	out := new(DeleteHPAResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Project service

type ProjectHandler interface {
	// 发布项目
	CreateProject(context.Context, *CreateProjectRequest, *CreateProjectResponse) error
	// 重新发布项目
	ReCreateProject(context.Context, *ReCreateProjectRequest, *ReCreateProjectResponse) error
	// 获取项目状态
	GetProjectStatus(context.Context, *GetProjectStatusRequest, *GetProjectStatusResponse) error
	// 删除项目
	DeleteProject(context.Context, *DeleteProjectRequest, *DeleteProjectResponse) error
	// 回滚项目
	RollOutProject(context.Context, *RollOutProjectRequest, *RollOutProjectResponse) error
	GetRollOutRevision(context.Context, *GetRollOutRevisionRequest, *GetRollOutRevisionResponse) error
	// 停止项目
	StopProject(context.Context, *StopProjectRequest, *StopProjectResponse) error
	// 获取pod列表
	GetPodlist(context.Context, *GetPodlistRequest, *GetPodlistResponse) error
	// 获取项目运行副本数
	GetDeploymentReplicas(context.Context, *GetDeploymentReplicasRequest, *GetDeploymentReplicasResponse) error
	// 设置项目需求副本数
	SetDeploymentReplicas(context.Context, *SetDeploymentReplicasRequest, *SetDeploymentReplicasResponse) error
	// 获取项目事件信息
	GetProjectEvent(context.Context, *GetProjectEventRequest, *GetProjectEventResponse) error
	// 创建或者更新外部网络
	CreateOrUpdateProjectExternalNetwork(context.Context, *CreateOrUpdateProjectExternalNetworkRequest, *CreateOrUpdateProjectExternalNetworkResponse) error
	// 创建TCP外网
	UpdateServiceToExternal(context.Context, *UpdateServiceToExternalRequest, *UpdateServiceToExternalResponse) error
	// 删除外网
	DeleteProjectExternalNetwork(context.Context, *DeleteProjectExternalNetworkRequest, *DeleteProjectExternalNetworkResponse) error
	// 将TCP外网改成内网
	UpdateServiceToInner(context.Context, *UpdateServiceToInnerRequest, *UpdateServiceToInnerResponse) error
	// 创建service
	CreateService(context.Context, *CreateServiceRequest, *CreateServiceResponse) error
	// 删除service
	DeleteService(context.Context, *DeleteServiceRequest, *DeleteServiceResponse) error
	// 更新service
	UpdateService(context.Context, *UpdateServiceRequest, *UpdateServiceResponse) error
	// 更新project log type
	// rpc UpdateLogType(UpdateLogTypeRequest) returns (UpdateLogTypeResponse) {};
	// 更新 HPA
	CreateOrUpdateHPA(context.Context, *CreateOrUpdateHPARequest, *CreateOrUpdateHPAResponse) error
	// 删除HPA
	DeleteHPA(context.Context, *DeleteHPARequest, *DeleteHPAResponse) error
}

func RegisterProjectHandler(s server.Server, hdlr ProjectHandler, opts ...server.HandlerOption) {
	type project interface {
		CreateProject(ctx context.Context, in *CreateProjectRequest, out *CreateProjectResponse) error
		ReCreateProject(ctx context.Context, in *ReCreateProjectRequest, out *ReCreateProjectResponse) error
		GetProjectStatus(ctx context.Context, in *GetProjectStatusRequest, out *GetProjectStatusResponse) error
		DeleteProject(ctx context.Context, in *DeleteProjectRequest, out *DeleteProjectResponse) error
		RollOutProject(ctx context.Context, in *RollOutProjectRequest, out *RollOutProjectResponse) error
		GetRollOutRevision(ctx context.Context, in *GetRollOutRevisionRequest, out *GetRollOutRevisionResponse) error
		StopProject(ctx context.Context, in *StopProjectRequest, out *StopProjectResponse) error
		GetPodlist(ctx context.Context, in *GetPodlistRequest, out *GetPodlistResponse) error
		GetDeploymentReplicas(ctx context.Context, in *GetDeploymentReplicasRequest, out *GetDeploymentReplicasResponse) error
		SetDeploymentReplicas(ctx context.Context, in *SetDeploymentReplicasRequest, out *SetDeploymentReplicasResponse) error
		GetProjectEvent(ctx context.Context, in *GetProjectEventRequest, out *GetProjectEventResponse) error
		CreateOrUpdateProjectExternalNetwork(ctx context.Context, in *CreateOrUpdateProjectExternalNetworkRequest, out *CreateOrUpdateProjectExternalNetworkResponse) error
		UpdateServiceToExternal(ctx context.Context, in *UpdateServiceToExternalRequest, out *UpdateServiceToExternalResponse) error
		DeleteProjectExternalNetwork(ctx context.Context, in *DeleteProjectExternalNetworkRequest, out *DeleteProjectExternalNetworkResponse) error
		UpdateServiceToInner(ctx context.Context, in *UpdateServiceToInnerRequest, out *UpdateServiceToInnerResponse) error
		CreateService(ctx context.Context, in *CreateServiceRequest, out *CreateServiceResponse) error
		DeleteService(ctx context.Context, in *DeleteServiceRequest, out *DeleteServiceResponse) error
		UpdateService(ctx context.Context, in *UpdateServiceRequest, out *UpdateServiceResponse) error
		CreateOrUpdateHPA(ctx context.Context, in *CreateOrUpdateHPARequest, out *CreateOrUpdateHPAResponse) error
		DeleteHPA(ctx context.Context, in *DeleteHPARequest, out *DeleteHPAResponse) error
	}
	type Project struct {
		project
	}
	h := &projectHandler{hdlr}
	s.Handle(s.NewHandler(&Project{h}, opts...))
}

type projectHandler struct {
	ProjectHandler
}

func (h *projectHandler) CreateProject(ctx context.Context, in *CreateProjectRequest, out *CreateProjectResponse) error {
	return h.ProjectHandler.CreateProject(ctx, in, out)
}

func (h *projectHandler) ReCreateProject(ctx context.Context, in *ReCreateProjectRequest, out *ReCreateProjectResponse) error {
	return h.ProjectHandler.ReCreateProject(ctx, in, out)
}

func (h *projectHandler) GetProjectStatus(ctx context.Context, in *GetProjectStatusRequest, out *GetProjectStatusResponse) error {
	return h.ProjectHandler.GetProjectStatus(ctx, in, out)
}

func (h *projectHandler) DeleteProject(ctx context.Context, in *DeleteProjectRequest, out *DeleteProjectResponse) error {
	return h.ProjectHandler.DeleteProject(ctx, in, out)
}

func (h *projectHandler) RollOutProject(ctx context.Context, in *RollOutProjectRequest, out *RollOutProjectResponse) error {
	return h.ProjectHandler.RollOutProject(ctx, in, out)
}

func (h *projectHandler) GetRollOutRevision(ctx context.Context, in *GetRollOutRevisionRequest, out *GetRollOutRevisionResponse) error {
	return h.ProjectHandler.GetRollOutRevision(ctx, in, out)
}

func (h *projectHandler) StopProject(ctx context.Context, in *StopProjectRequest, out *StopProjectResponse) error {
	return h.ProjectHandler.StopProject(ctx, in, out)
}

func (h *projectHandler) GetPodlist(ctx context.Context, in *GetPodlistRequest, out *GetPodlistResponse) error {
	return h.ProjectHandler.GetPodlist(ctx, in, out)
}

func (h *projectHandler) GetDeploymentReplicas(ctx context.Context, in *GetDeploymentReplicasRequest, out *GetDeploymentReplicasResponse) error {
	return h.ProjectHandler.GetDeploymentReplicas(ctx, in, out)
}

func (h *projectHandler) SetDeploymentReplicas(ctx context.Context, in *SetDeploymentReplicasRequest, out *SetDeploymentReplicasResponse) error {
	return h.ProjectHandler.SetDeploymentReplicas(ctx, in, out)
}

func (h *projectHandler) GetProjectEvent(ctx context.Context, in *GetProjectEventRequest, out *GetProjectEventResponse) error {
	return h.ProjectHandler.GetProjectEvent(ctx, in, out)
}

func (h *projectHandler) CreateOrUpdateProjectExternalNetwork(ctx context.Context, in *CreateOrUpdateProjectExternalNetworkRequest, out *CreateOrUpdateProjectExternalNetworkResponse) error {
	return h.ProjectHandler.CreateOrUpdateProjectExternalNetwork(ctx, in, out)
}

func (h *projectHandler) UpdateServiceToExternal(ctx context.Context, in *UpdateServiceToExternalRequest, out *UpdateServiceToExternalResponse) error {
	return h.ProjectHandler.UpdateServiceToExternal(ctx, in, out)
}

func (h *projectHandler) DeleteProjectExternalNetwork(ctx context.Context, in *DeleteProjectExternalNetworkRequest, out *DeleteProjectExternalNetworkResponse) error {
	return h.ProjectHandler.DeleteProjectExternalNetwork(ctx, in, out)
}

func (h *projectHandler) UpdateServiceToInner(ctx context.Context, in *UpdateServiceToInnerRequest, out *UpdateServiceToInnerResponse) error {
	return h.ProjectHandler.UpdateServiceToInner(ctx, in, out)
}

func (h *projectHandler) CreateService(ctx context.Context, in *CreateServiceRequest, out *CreateServiceResponse) error {
	return h.ProjectHandler.CreateService(ctx, in, out)
}

func (h *projectHandler) DeleteService(ctx context.Context, in *DeleteServiceRequest, out *DeleteServiceResponse) error {
	return h.ProjectHandler.DeleteService(ctx, in, out)
}

func (h *projectHandler) UpdateService(ctx context.Context, in *UpdateServiceRequest, out *UpdateServiceResponse) error {
	return h.ProjectHandler.UpdateService(ctx, in, out)
}

func (h *projectHandler) CreateOrUpdateHPA(ctx context.Context, in *CreateOrUpdateHPARequest, out *CreateOrUpdateHPAResponse) error {
	return h.ProjectHandler.CreateOrUpdateHPA(ctx, in, out)
}

func (h *projectHandler) DeleteHPA(ctx context.Context, in *DeleteHPARequest, out *DeleteHPAResponse) error {
	return h.ProjectHandler.DeleteHPA(ctx, in, out)
}
