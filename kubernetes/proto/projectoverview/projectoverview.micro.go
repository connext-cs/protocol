// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: projectoverview.proto

/*
Package projectoverview is a generated protocol buffer package.

It is generated from these files:
	projectoverview.proto

It has these top-level messages:
	GetProjectPodsCountByParentProjectRequest
	GetProjectPodsCountByParentProjectResponse
	GetRunningProjectsCountRequest
	GetRunningProjectsCountResponse
	GetRunningCaaSRequest
	GetRunningCaaSResponse
*/
package projectoverview

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProjectOverview service

type ProjectOverviewService interface {
	// 获取已用容器数量
	GetProjectPodsCountByParentProject(ctx context.Context, in *GetProjectPodsCountByParentProjectRequest, opts ...client.CallOption) (*GetProjectPodsCountByParentProjectResponse, error)
	// 获取正在运行的项目数量
	GetRunningProjectsCount(ctx context.Context, in *GetRunningProjectsCountRequest, opts ...client.CallOption) (*GetRunningProjectsCountResponse, error)
	// 获取中间件启动数量
	GetRunningCaaS(ctx context.Context, in *GetRunningCaaSRequest, opts ...client.CallOption) (*GetRunningCaaSResponse, error)
}

type projectOverviewService struct {
	c    client.Client
	name string
}

func NewProjectOverviewService(name string, c client.Client) ProjectOverviewService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "projectoverview"
	}
	return &projectOverviewService{
		c:    c,
		name: name,
	}
}

func (c *projectOverviewService) GetProjectPodsCountByParentProject(ctx context.Context, in *GetProjectPodsCountByParentProjectRequest, opts ...client.CallOption) (*GetProjectPodsCountByParentProjectResponse, error) {
	req := c.c.NewRequest(c.name, "ProjectOverview.GetProjectPodsCountByParentProject", in)
	out := new(GetProjectPodsCountByParentProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectOverviewService) GetRunningProjectsCount(ctx context.Context, in *GetRunningProjectsCountRequest, opts ...client.CallOption) (*GetRunningProjectsCountResponse, error) {
	req := c.c.NewRequest(c.name, "ProjectOverview.GetRunningProjectsCount", in)
	out := new(GetRunningProjectsCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectOverviewService) GetRunningCaaS(ctx context.Context, in *GetRunningCaaSRequest, opts ...client.CallOption) (*GetRunningCaaSResponse, error) {
	req := c.c.NewRequest(c.name, "ProjectOverview.GetRunningCaaS", in)
	out := new(GetRunningCaaSResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProjectOverview service

type ProjectOverviewHandler interface {
	// 获取已用容器数量
	GetProjectPodsCountByParentProject(context.Context, *GetProjectPodsCountByParentProjectRequest, *GetProjectPodsCountByParentProjectResponse) error
	// 获取正在运行的项目数量
	GetRunningProjectsCount(context.Context, *GetRunningProjectsCountRequest, *GetRunningProjectsCountResponse) error
	// 获取中间件启动数量
	GetRunningCaaS(context.Context, *GetRunningCaaSRequest, *GetRunningCaaSResponse) error
}

func RegisterProjectOverviewHandler(s server.Server, hdlr ProjectOverviewHandler, opts ...server.HandlerOption) {
	type projectOverview interface {
		GetProjectPodsCountByParentProject(ctx context.Context, in *GetProjectPodsCountByParentProjectRequest, out *GetProjectPodsCountByParentProjectResponse) error
		GetRunningProjectsCount(ctx context.Context, in *GetRunningProjectsCountRequest, out *GetRunningProjectsCountResponse) error
		GetRunningCaaS(ctx context.Context, in *GetRunningCaaSRequest, out *GetRunningCaaSResponse) error
	}
	type ProjectOverview struct {
		projectOverview
	}
	h := &projectOverviewHandler{hdlr}
	s.Handle(s.NewHandler(&ProjectOverview{h}, opts...))
}

type projectOverviewHandler struct {
	ProjectOverviewHandler
}

func (h *projectOverviewHandler) GetProjectPodsCountByParentProject(ctx context.Context, in *GetProjectPodsCountByParentProjectRequest, out *GetProjectPodsCountByParentProjectResponse) error {
	return h.ProjectOverviewHandler.GetProjectPodsCountByParentProject(ctx, in, out)
}

func (h *projectOverviewHandler) GetRunningProjectsCount(ctx context.Context, in *GetRunningProjectsCountRequest, out *GetRunningProjectsCountResponse) error {
	return h.ProjectOverviewHandler.GetRunningProjectsCount(ctx, in, out)
}

func (h *projectOverviewHandler) GetRunningCaaS(ctx context.Context, in *GetRunningCaaSRequest, out *GetRunningCaaSResponse) error {
	return h.ProjectOverviewHandler.GetRunningCaaS(ctx, in, out)
}
