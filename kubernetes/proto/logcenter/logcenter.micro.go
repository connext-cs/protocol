// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: logcenter.proto

/*
Package logcenter is a generated protocol buffer package.

It is generated from these files:
	logcenter.proto

It has these top-level messages:
*/
package logcenter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LogCenter service

type LogCenterService interface {
	// 获取实时日志
	GetCurrentLog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// rpc GetCurrentLog(GetCurrentLogRequest) returns(GetCurrentLogResponse) {};
	// 获取pod列表
	GetPodList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	//    rpc GetPodlist (GetPodListRequest) returns (GetPodListResponse) {};
	GetKibanaURL(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type logCenterService struct {
	c    client.Client
	name string
}

func NewLogCenterService(name string, c client.Client) LogCenterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "logcenter"
	}
	return &logCenterService{
		c:    c,
		name: name,
	}
}

func (c *logCenterService) GetCurrentLog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "LogCenter.GetCurrentLog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logCenterService) GetPodList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "LogCenter.GetPodList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logCenterService) GetKibanaURL(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "LogCenter.GetKibanaURL", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogCenter service

type LogCenterHandler interface {
	// 获取实时日志
	GetCurrentLog(context.Context, *go_api.Request, *go_api.Response) error
	// rpc GetCurrentLog(GetCurrentLogRequest) returns(GetCurrentLogResponse) {};
	// 获取pod列表
	GetPodList(context.Context, *go_api.Request, *go_api.Response) error
	//    rpc GetPodlist (GetPodListRequest) returns (GetPodListResponse) {};
	GetKibanaURL(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterLogCenterHandler(s server.Server, hdlr LogCenterHandler, opts ...server.HandlerOption) {
	type logCenter interface {
		GetCurrentLog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetPodList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetKibanaURL(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type LogCenter struct {
		logCenter
	}
	h := &logCenterHandler{hdlr}
	s.Handle(s.NewHandler(&LogCenter{h}, opts...))
}

type logCenterHandler struct {
	LogCenterHandler
}

func (h *logCenterHandler) GetCurrentLog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.LogCenterHandler.GetCurrentLog(ctx, in, out)
}

func (h *logCenterHandler) GetPodList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.LogCenterHandler.GetPodList(ctx, in, out)
}

func (h *logCenterHandler) GetKibanaURL(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.LogCenterHandler.GetKibanaURL(ctx, in, out)
}
