// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: nodemanager.proto

package nodemanager

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for NodeManager service

type NodeManagerService interface {
	//获取API版本
	GetApiserverVersion(ctx context.Context, in *GetApiserverVersionRequest, opts ...client.CallOption) (*GetApiserverVersionResponse, error)
	//获取master状态
	GetMasterStatus(ctx context.Context, in *GetMasterStatusRequest, opts ...client.CallOption) (*GetMasterStatusResponse, error)
	//获取集群cpu资源
	GetClusterCpu(ctx context.Context, in *GetClusterCpuRequest, opts ...client.CallOption) (*GetClusterCpuResponse, error)
	//获取集群内存资源
	GetClusterMemory(ctx context.Context, in *GetClusterMemoryRequest, opts ...client.CallOption) (*GetClusterMemoryResponse, error)
	//获取集群内pod数量
	GetTotalPodNumber(ctx context.Context, in *GetTotalPodNumberRequest, opts ...client.CallOption) (*GetTotalPodNumberResponse, error)
	//获取网络组件
	GetNetworkComponent(ctx context.Context, in *GetNetworkComponentRequest, opts ...client.CallOption) (*GetNetworkComponentResponse, error)
	//获取DNS组件
	GetDNSComponent(ctx context.Context, in *GetDNSComponentRequest, opts ...client.CallOption) (*GetDNSComponentResponse, error)
	//获取监控组件
	GetMonitorComponent(ctx context.Context, in *GetMonitorComponentRequest, opts ...client.CallOption) (*GetMonitorComponentResponse, error)
	//获取Node列表
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...client.CallOption) (*GetNodesResponse, error)
	//获取Node基础信息
	GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, opts ...client.CallOption) (*GetNodeStatusResponse, error)
	//获取节点分组名
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...client.CallOption) (*GetGroupResponse, error)
	//添加到默认分组
	AddToDefaultGroup(ctx context.Context, in *AddToDefaultGroupRequest, opts ...client.CallOption) (*AddToDefaultGroupResponse, error)
	//从默认分组移除
	RemoveFromDefaultGroup(ctx context.Context, in *RemoveFromDefaultGroupRequest, opts ...client.CallOption) (*RemoveFromDefaultGroupResponse, error)
	//添加进分组
	AddToGroup(ctx context.Context, in *AddToGroupRequest, opts ...client.CallOption) (*AddToGroupResponse, error)
	//从分组中移除
	RemoveFromGroup(ctx context.Context, in *RemoveFromGroupRequest, opts ...client.CallOption) (*RemoveFromGroupResponse, error)
	//获取NodeName列表
	GetNodeNameList(ctx context.Context, in *GetNodesRequest, opts ...client.CallOption) (*GetNodeNameListResponse, error)
	//获取分组中Node列表
	GetGroupNodeNameList(ctx context.Context, in *GetGroupNodeListRequest, opts ...client.CallOption) (*GetNodeNameListResponse, error)
}

type nodeManagerService struct {
	c    client.Client
	name string
}

func NewNodeManagerService(name string, c client.Client) NodeManagerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "nodemanager"
	}
	return &nodeManagerService{
		c:    c,
		name: name,
	}
}

func (c *nodeManagerService) GetApiserverVersion(ctx context.Context, in *GetApiserverVersionRequest, opts ...client.CallOption) (*GetApiserverVersionResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetApiserverVersion", in)
	out := new(GetApiserverVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetMasterStatus(ctx context.Context, in *GetMasterStatusRequest, opts ...client.CallOption) (*GetMasterStatusResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetMasterStatus", in)
	out := new(GetMasterStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetClusterCpu(ctx context.Context, in *GetClusterCpuRequest, opts ...client.CallOption) (*GetClusterCpuResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetClusterCpu", in)
	out := new(GetClusterCpuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetClusterMemory(ctx context.Context, in *GetClusterMemoryRequest, opts ...client.CallOption) (*GetClusterMemoryResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetClusterMemory", in)
	out := new(GetClusterMemoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetTotalPodNumber(ctx context.Context, in *GetTotalPodNumberRequest, opts ...client.CallOption) (*GetTotalPodNumberResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetTotalPodNumber", in)
	out := new(GetTotalPodNumberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetNetworkComponent(ctx context.Context, in *GetNetworkComponentRequest, opts ...client.CallOption) (*GetNetworkComponentResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetNetworkComponent", in)
	out := new(GetNetworkComponentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetDNSComponent(ctx context.Context, in *GetDNSComponentRequest, opts ...client.CallOption) (*GetDNSComponentResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetDNSComponent", in)
	out := new(GetDNSComponentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetMonitorComponent(ctx context.Context, in *GetMonitorComponentRequest, opts ...client.CallOption) (*GetMonitorComponentResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetMonitorComponent", in)
	out := new(GetMonitorComponentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...client.CallOption) (*GetNodesResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetNodes", in)
	out := new(GetNodesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, opts ...client.CallOption) (*GetNodeStatusResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetNodeStatus", in)
	out := new(GetNodeStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...client.CallOption) (*GetGroupResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetGroup", in)
	out := new(GetGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) AddToDefaultGroup(ctx context.Context, in *AddToDefaultGroupRequest, opts ...client.CallOption) (*AddToDefaultGroupResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.AddToDefaultGroup", in)
	out := new(AddToDefaultGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) RemoveFromDefaultGroup(ctx context.Context, in *RemoveFromDefaultGroupRequest, opts ...client.CallOption) (*RemoveFromDefaultGroupResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.RemoveFromDefaultGroup", in)
	out := new(RemoveFromDefaultGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) AddToGroup(ctx context.Context, in *AddToGroupRequest, opts ...client.CallOption) (*AddToGroupResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.AddToGroup", in)
	out := new(AddToGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) RemoveFromGroup(ctx context.Context, in *RemoveFromGroupRequest, opts ...client.CallOption) (*RemoveFromGroupResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.RemoveFromGroup", in)
	out := new(RemoveFromGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetNodeNameList(ctx context.Context, in *GetNodesRequest, opts ...client.CallOption) (*GetNodeNameListResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetNodeNameList", in)
	out := new(GetNodeNameListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerService) GetGroupNodeNameList(ctx context.Context, in *GetGroupNodeListRequest, opts ...client.CallOption) (*GetNodeNameListResponse, error) {
	req := c.c.NewRequest(c.name, "NodeManager.GetGroupNodeNameList", in)
	out := new(GetNodeNameListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeManager service

type NodeManagerHandler interface {
	//获取API版本
	GetApiserverVersion(context.Context, *GetApiserverVersionRequest, *GetApiserverVersionResponse) error
	//获取master状态
	GetMasterStatus(context.Context, *GetMasterStatusRequest, *GetMasterStatusResponse) error
	//获取集群cpu资源
	GetClusterCpu(context.Context, *GetClusterCpuRequest, *GetClusterCpuResponse) error
	//获取集群内存资源
	GetClusterMemory(context.Context, *GetClusterMemoryRequest, *GetClusterMemoryResponse) error
	//获取集群内pod数量
	GetTotalPodNumber(context.Context, *GetTotalPodNumberRequest, *GetTotalPodNumberResponse) error
	//获取网络组件
	GetNetworkComponent(context.Context, *GetNetworkComponentRequest, *GetNetworkComponentResponse) error
	//获取DNS组件
	GetDNSComponent(context.Context, *GetDNSComponentRequest, *GetDNSComponentResponse) error
	//获取监控组件
	GetMonitorComponent(context.Context, *GetMonitorComponentRequest, *GetMonitorComponentResponse) error
	//获取Node列表
	GetNodes(context.Context, *GetNodesRequest, *GetNodesResponse) error
	//获取Node基础信息
	GetNodeStatus(context.Context, *GetNodeStatusRequest, *GetNodeStatusResponse) error
	//获取节点分组名
	GetGroup(context.Context, *GetGroupRequest, *GetGroupResponse) error
	//添加到默认分组
	AddToDefaultGroup(context.Context, *AddToDefaultGroupRequest, *AddToDefaultGroupResponse) error
	//从默认分组移除
	RemoveFromDefaultGroup(context.Context, *RemoveFromDefaultGroupRequest, *RemoveFromDefaultGroupResponse) error
	//添加进分组
	AddToGroup(context.Context, *AddToGroupRequest, *AddToGroupResponse) error
	//从分组中移除
	RemoveFromGroup(context.Context, *RemoveFromGroupRequest, *RemoveFromGroupResponse) error
	//获取NodeName列表
	GetNodeNameList(context.Context, *GetNodesRequest, *GetNodeNameListResponse) error
	//获取分组中Node列表
	GetGroupNodeNameList(context.Context, *GetGroupNodeListRequest, *GetNodeNameListResponse) error
}

func RegisterNodeManagerHandler(s server.Server, hdlr NodeManagerHandler, opts ...server.HandlerOption) error {
	type nodeManager interface {
		GetApiserverVersion(ctx context.Context, in *GetApiserverVersionRequest, out *GetApiserverVersionResponse) error
		GetMasterStatus(ctx context.Context, in *GetMasterStatusRequest, out *GetMasterStatusResponse) error
		GetClusterCpu(ctx context.Context, in *GetClusterCpuRequest, out *GetClusterCpuResponse) error
		GetClusterMemory(ctx context.Context, in *GetClusterMemoryRequest, out *GetClusterMemoryResponse) error
		GetTotalPodNumber(ctx context.Context, in *GetTotalPodNumberRequest, out *GetTotalPodNumberResponse) error
		GetNetworkComponent(ctx context.Context, in *GetNetworkComponentRequest, out *GetNetworkComponentResponse) error
		GetDNSComponent(ctx context.Context, in *GetDNSComponentRequest, out *GetDNSComponentResponse) error
		GetMonitorComponent(ctx context.Context, in *GetMonitorComponentRequest, out *GetMonitorComponentResponse) error
		GetNodes(ctx context.Context, in *GetNodesRequest, out *GetNodesResponse) error
		GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, out *GetNodeStatusResponse) error
		GetGroup(ctx context.Context, in *GetGroupRequest, out *GetGroupResponse) error
		AddToDefaultGroup(ctx context.Context, in *AddToDefaultGroupRequest, out *AddToDefaultGroupResponse) error
		RemoveFromDefaultGroup(ctx context.Context, in *RemoveFromDefaultGroupRequest, out *RemoveFromDefaultGroupResponse) error
		AddToGroup(ctx context.Context, in *AddToGroupRequest, out *AddToGroupResponse) error
		RemoveFromGroup(ctx context.Context, in *RemoveFromGroupRequest, out *RemoveFromGroupResponse) error
		GetNodeNameList(ctx context.Context, in *GetNodesRequest, out *GetNodeNameListResponse) error
		GetGroupNodeNameList(ctx context.Context, in *GetGroupNodeListRequest, out *GetNodeNameListResponse) error
	}
	type NodeManager struct {
		nodeManager
	}
	h := &nodeManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeManager{h}, opts...))
}

type nodeManagerHandler struct {
	NodeManagerHandler
}

func (h *nodeManagerHandler) GetApiserverVersion(ctx context.Context, in *GetApiserverVersionRequest, out *GetApiserverVersionResponse) error {
	return h.NodeManagerHandler.GetApiserverVersion(ctx, in, out)
}

func (h *nodeManagerHandler) GetMasterStatus(ctx context.Context, in *GetMasterStatusRequest, out *GetMasterStatusResponse) error {
	return h.NodeManagerHandler.GetMasterStatus(ctx, in, out)
}

func (h *nodeManagerHandler) GetClusterCpu(ctx context.Context, in *GetClusterCpuRequest, out *GetClusterCpuResponse) error {
	return h.NodeManagerHandler.GetClusterCpu(ctx, in, out)
}

func (h *nodeManagerHandler) GetClusterMemory(ctx context.Context, in *GetClusterMemoryRequest, out *GetClusterMemoryResponse) error {
	return h.NodeManagerHandler.GetClusterMemory(ctx, in, out)
}

func (h *nodeManagerHandler) GetTotalPodNumber(ctx context.Context, in *GetTotalPodNumberRequest, out *GetTotalPodNumberResponse) error {
	return h.NodeManagerHandler.GetTotalPodNumber(ctx, in, out)
}

func (h *nodeManagerHandler) GetNetworkComponent(ctx context.Context, in *GetNetworkComponentRequest, out *GetNetworkComponentResponse) error {
	return h.NodeManagerHandler.GetNetworkComponent(ctx, in, out)
}

func (h *nodeManagerHandler) GetDNSComponent(ctx context.Context, in *GetDNSComponentRequest, out *GetDNSComponentResponse) error {
	return h.NodeManagerHandler.GetDNSComponent(ctx, in, out)
}

func (h *nodeManagerHandler) GetMonitorComponent(ctx context.Context, in *GetMonitorComponentRequest, out *GetMonitorComponentResponse) error {
	return h.NodeManagerHandler.GetMonitorComponent(ctx, in, out)
}

func (h *nodeManagerHandler) GetNodes(ctx context.Context, in *GetNodesRequest, out *GetNodesResponse) error {
	return h.NodeManagerHandler.GetNodes(ctx, in, out)
}

func (h *nodeManagerHandler) GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, out *GetNodeStatusResponse) error {
	return h.NodeManagerHandler.GetNodeStatus(ctx, in, out)
}

func (h *nodeManagerHandler) GetGroup(ctx context.Context, in *GetGroupRequest, out *GetGroupResponse) error {
	return h.NodeManagerHandler.GetGroup(ctx, in, out)
}

func (h *nodeManagerHandler) AddToDefaultGroup(ctx context.Context, in *AddToDefaultGroupRequest, out *AddToDefaultGroupResponse) error {
	return h.NodeManagerHandler.AddToDefaultGroup(ctx, in, out)
}

func (h *nodeManagerHandler) RemoveFromDefaultGroup(ctx context.Context, in *RemoveFromDefaultGroupRequest, out *RemoveFromDefaultGroupResponse) error {
	return h.NodeManagerHandler.RemoveFromDefaultGroup(ctx, in, out)
}

func (h *nodeManagerHandler) AddToGroup(ctx context.Context, in *AddToGroupRequest, out *AddToGroupResponse) error {
	return h.NodeManagerHandler.AddToGroup(ctx, in, out)
}

func (h *nodeManagerHandler) RemoveFromGroup(ctx context.Context, in *RemoveFromGroupRequest, out *RemoveFromGroupResponse) error {
	return h.NodeManagerHandler.RemoveFromGroup(ctx, in, out)
}

func (h *nodeManagerHandler) GetNodeNameList(ctx context.Context, in *GetNodesRequest, out *GetNodeNameListResponse) error {
	return h.NodeManagerHandler.GetNodeNameList(ctx, in, out)
}

func (h *nodeManagerHandler) GetGroupNodeNameList(ctx context.Context, in *GetGroupNodeListRequest, out *GetNodeNameListResponse) error {
	return h.NodeManagerHandler.GetGroupNodeNameList(ctx, in, out)
}
