// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: namespace.proto

/*
Package namespace is a generated protocol buffer package.

It is generated from these files:
	namespace.proto

It has these top-level messages:
	CreateNamespaceRequest
	CreateNamespaceResponse
	DeleteNamespaceRequest
	DeleteNamespaceResponse
	GetNamespaceRequest
	GetNamespaceResponse
	AllowToIPBlockRequest
	AllowToIPBlockResponse
	AllowFromIPBlockRequest
	AllowFromIPBlockResponse
	AllowToNamespaceRequest
	AllowToNamespaceResponse
	AllowFromNamespaceRequest
	AllowFromNamespaceResponse
	DeleteExistingRuleRequest
	DeleteExistingRuleResponse
	Quota
	GetQuotaRequest
	GetQuotaResponse
	ApplyQuotaRequest
	ApplyQuotaResponse
	Config
	CreateOrUpdateConfigRequest
	CreateOrUpdateConfigResponse
	DeleteConfigRequest
	DeleteConfigResponse
*/
package namespace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Namespace service

type NamespaceService interface {
	// 新建父项目
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...client.CallOption) (*CreateNamespaceResponse, error)
	// 删除父项目
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...client.CallOption) (*DeleteNamespaceResponse, error)
	// 获取父项目
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...client.CallOption) (*GetNamespaceResponse, error)
	// 源访问ip块
	AllowToIPBlock(ctx context.Context, in *AllowToIPBlockRequest, opts ...client.CallOption) (*AllowToIPBlockResponse, error)
	// 目标ip块访问源
	AllowFromIPBlock(ctx context.Context, in *AllowFromIPBlockRequest, opts ...client.CallOption) (*AllowFromIPBlockResponse, error)
	// 源访问父项目
	AllowToNamespace(ctx context.Context, in *AllowToNamespaceRequest, opts ...client.CallOption) (*AllowToNamespaceResponse, error)
	// 父项目访问源
	AllowFromNamespace(ctx context.Context, in *AllowFromNamespaceRequest, opts ...client.CallOption) (*AllowFromNamespaceResponse, error)
	// 删除网络隔离
	DeleteExistingRule(ctx context.Context, in *DeleteExistingRuleRequest, opts ...client.CallOption) (*DeleteExistingRuleResponse, error)
	// 获取资源管理信息
	GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...client.CallOption) (*GetQuotaResponse, error)
	// 应用资源管理信息
	ApplyQuota(ctx context.Context, in *ApplyQuotaRequest, opts ...client.CallOption) (*ApplyQuotaResponse, error)
	// 创建或者更新config
	CreateOrUpdateConfig(ctx context.Context, in *CreateOrUpdateConfigRequest, opts ...client.CallOption) (*CreateOrUpdateConfigResponse, error)
	// 删除config
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...client.CallOption) (*DeleteConfigResponse, error)
}

type namespaceService struct {
	c    client.Client
	name string
}

func NewNamespaceService(name string, c client.Client) NamespaceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "namespace"
	}
	return &namespaceService{
		c:    c,
		name: name,
	}
}

func (c *namespaceService) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...client.CallOption) (*CreateNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.CreateNamespace", in)
	out := new(CreateNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...client.CallOption) (*DeleteNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.DeleteNamespace", in)
	out := new(DeleteNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...client.CallOption) (*GetNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.GetNamespace", in)
	out := new(GetNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) AllowToIPBlock(ctx context.Context, in *AllowToIPBlockRequest, opts ...client.CallOption) (*AllowToIPBlockResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.AllowToIPBlock", in)
	out := new(AllowToIPBlockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) AllowFromIPBlock(ctx context.Context, in *AllowFromIPBlockRequest, opts ...client.CallOption) (*AllowFromIPBlockResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.AllowFromIPBlock", in)
	out := new(AllowFromIPBlockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) AllowToNamespace(ctx context.Context, in *AllowToNamespaceRequest, opts ...client.CallOption) (*AllowToNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.AllowToNamespace", in)
	out := new(AllowToNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) AllowFromNamespace(ctx context.Context, in *AllowFromNamespaceRequest, opts ...client.CallOption) (*AllowFromNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.AllowFromNamespace", in)
	out := new(AllowFromNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) DeleteExistingRule(ctx context.Context, in *DeleteExistingRuleRequest, opts ...client.CallOption) (*DeleteExistingRuleResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.DeleteExistingRule", in)
	out := new(DeleteExistingRuleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...client.CallOption) (*GetQuotaResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.GetQuota", in)
	out := new(GetQuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) ApplyQuota(ctx context.Context, in *ApplyQuotaRequest, opts ...client.CallOption) (*ApplyQuotaResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.ApplyQuota", in)
	out := new(ApplyQuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) CreateOrUpdateConfig(ctx context.Context, in *CreateOrUpdateConfigRequest, opts ...client.CallOption) (*CreateOrUpdateConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.CreateOrUpdateConfig", in)
	out := new(CreateOrUpdateConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceService) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...client.CallOption) (*DeleteConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Namespace.DeleteConfig", in)
	out := new(DeleteConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Namespace service

type NamespaceHandler interface {
	// 新建父项目
	CreateNamespace(context.Context, *CreateNamespaceRequest, *CreateNamespaceResponse) error
	// 删除父项目
	DeleteNamespace(context.Context, *DeleteNamespaceRequest, *DeleteNamespaceResponse) error
	// 获取父项目
	GetNamespace(context.Context, *GetNamespaceRequest, *GetNamespaceResponse) error
	// 源访问ip块
	AllowToIPBlock(context.Context, *AllowToIPBlockRequest, *AllowToIPBlockResponse) error
	// 目标ip块访问源
	AllowFromIPBlock(context.Context, *AllowFromIPBlockRequest, *AllowFromIPBlockResponse) error
	// 源访问父项目
	AllowToNamespace(context.Context, *AllowToNamespaceRequest, *AllowToNamespaceResponse) error
	// 父项目访问源
	AllowFromNamespace(context.Context, *AllowFromNamespaceRequest, *AllowFromNamespaceResponse) error
	// 删除网络隔离
	DeleteExistingRule(context.Context, *DeleteExistingRuleRequest, *DeleteExistingRuleResponse) error
	// 获取资源管理信息
	GetQuota(context.Context, *GetQuotaRequest, *GetQuotaResponse) error
	// 应用资源管理信息
	ApplyQuota(context.Context, *ApplyQuotaRequest, *ApplyQuotaResponse) error
	// 创建或者更新config
	CreateOrUpdateConfig(context.Context, *CreateOrUpdateConfigRequest, *CreateOrUpdateConfigResponse) error
	// 删除config
	DeleteConfig(context.Context, *DeleteConfigRequest, *DeleteConfigResponse) error
}

func RegisterNamespaceHandler(s server.Server, hdlr NamespaceHandler, opts ...server.HandlerOption) {
	type namespace interface {
		CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, out *CreateNamespaceResponse) error
		DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, out *DeleteNamespaceResponse) error
		GetNamespace(ctx context.Context, in *GetNamespaceRequest, out *GetNamespaceResponse) error
		AllowToIPBlock(ctx context.Context, in *AllowToIPBlockRequest, out *AllowToIPBlockResponse) error
		AllowFromIPBlock(ctx context.Context, in *AllowFromIPBlockRequest, out *AllowFromIPBlockResponse) error
		AllowToNamespace(ctx context.Context, in *AllowToNamespaceRequest, out *AllowToNamespaceResponse) error
		AllowFromNamespace(ctx context.Context, in *AllowFromNamespaceRequest, out *AllowFromNamespaceResponse) error
		DeleteExistingRule(ctx context.Context, in *DeleteExistingRuleRequest, out *DeleteExistingRuleResponse) error
		GetQuota(ctx context.Context, in *GetQuotaRequest, out *GetQuotaResponse) error
		ApplyQuota(ctx context.Context, in *ApplyQuotaRequest, out *ApplyQuotaResponse) error
		CreateOrUpdateConfig(ctx context.Context, in *CreateOrUpdateConfigRequest, out *CreateOrUpdateConfigResponse) error
		DeleteConfig(ctx context.Context, in *DeleteConfigRequest, out *DeleteConfigResponse) error
	}
	type Namespace struct {
		namespace
	}
	h := &namespaceHandler{hdlr}
	s.Handle(s.NewHandler(&Namespace{h}, opts...))
}

type namespaceHandler struct {
	NamespaceHandler
}

func (h *namespaceHandler) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, out *CreateNamespaceResponse) error {
	return h.NamespaceHandler.CreateNamespace(ctx, in, out)
}

func (h *namespaceHandler) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, out *DeleteNamespaceResponse) error {
	return h.NamespaceHandler.DeleteNamespace(ctx, in, out)
}

func (h *namespaceHandler) GetNamespace(ctx context.Context, in *GetNamespaceRequest, out *GetNamespaceResponse) error {
	return h.NamespaceHandler.GetNamespace(ctx, in, out)
}

func (h *namespaceHandler) AllowToIPBlock(ctx context.Context, in *AllowToIPBlockRequest, out *AllowToIPBlockResponse) error {
	return h.NamespaceHandler.AllowToIPBlock(ctx, in, out)
}

func (h *namespaceHandler) AllowFromIPBlock(ctx context.Context, in *AllowFromIPBlockRequest, out *AllowFromIPBlockResponse) error {
	return h.NamespaceHandler.AllowFromIPBlock(ctx, in, out)
}

func (h *namespaceHandler) AllowToNamespace(ctx context.Context, in *AllowToNamespaceRequest, out *AllowToNamespaceResponse) error {
	return h.NamespaceHandler.AllowToNamespace(ctx, in, out)
}

func (h *namespaceHandler) AllowFromNamespace(ctx context.Context, in *AllowFromNamespaceRequest, out *AllowFromNamespaceResponse) error {
	return h.NamespaceHandler.AllowFromNamespace(ctx, in, out)
}

func (h *namespaceHandler) DeleteExistingRule(ctx context.Context, in *DeleteExistingRuleRequest, out *DeleteExistingRuleResponse) error {
	return h.NamespaceHandler.DeleteExistingRule(ctx, in, out)
}

func (h *namespaceHandler) GetQuota(ctx context.Context, in *GetQuotaRequest, out *GetQuotaResponse) error {
	return h.NamespaceHandler.GetQuota(ctx, in, out)
}

func (h *namespaceHandler) ApplyQuota(ctx context.Context, in *ApplyQuotaRequest, out *ApplyQuotaResponse) error {
	return h.NamespaceHandler.ApplyQuota(ctx, in, out)
}

func (h *namespaceHandler) CreateOrUpdateConfig(ctx context.Context, in *CreateOrUpdateConfigRequest, out *CreateOrUpdateConfigResponse) error {
	return h.NamespaceHandler.CreateOrUpdateConfig(ctx, in, out)
}

func (h *namespaceHandler) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, out *DeleteConfigResponse) error {
	return h.NamespaceHandler.DeleteConfig(ctx, in, out)
}
