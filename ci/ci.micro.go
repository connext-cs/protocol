// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ci.proto

package ci

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Template service

type TemplateService interface {
	List(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Query(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	UpdateTemplate(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type templateService struct {
	c    client.Client
	name string
}

func NewTemplateService(name string, c client.Client) TemplateService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "template"
	}
	return &templateService{
		c:    c,
		name: name,
	}
}

func (c *templateService) List(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Template.List", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateService) Query(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Template.Query", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateService) UpdateTemplate(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Template.UpdateTemplate", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Template service

type TemplateHandler interface {
	List(context.Context, *proto1.Request, *proto1.Response) error
	Query(context.Context, *proto1.Request, *proto1.Response) error
	UpdateTemplate(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterTemplateHandler(s server.Server, hdlr TemplateHandler, opts ...server.HandlerOption) error {
	type template interface {
		List(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Query(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		UpdateTemplate(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Template struct {
		template
	}
	h := &templateHandler{hdlr}
	return s.Handle(s.NewHandler(&Template{h}, opts...))
}

type templateHandler struct {
	TemplateHandler
}

func (h *templateHandler) List(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.TemplateHandler.List(ctx, in, out)
}

func (h *templateHandler) Query(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.TemplateHandler.Query(ctx, in, out)
}

func (h *templateHandler) UpdateTemplate(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.TemplateHandler.UpdateTemplate(ctx, in, out)
}

// Client API for Server service

type ServerService interface {
	Add(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Delete(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Update(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Query(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	List(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	BuildInit(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Build(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	BuildProcess(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	SetBuildVersion(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	BuildStop(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	VersionList(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	SFTPFileList(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	BuildLog(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	RpcVersionList(ctx context.Context, in *RpcVersionListReq, opts ...client.CallOption) (*RpcVersionListRes, error)
	RpcQuery(ctx context.Context, in *RpcQueryReq, opts ...client.CallOption) (*RpcQueryRes, error)
	RpcBuildQuery(ctx context.Context, in *RpcBuildQueryReq, opts ...client.CallOption) (*RpcBuildQueryRes, error)
	RpcDeleteByAppID(ctx context.Context, in *RpcDeleteByAppIDReq, opts ...client.CallOption) (*RpcDeleteByAppIDRes, error)
	RpcExistCIServerByAppID(ctx context.Context, in *RpcExistCIServerByAppIDReq, opts ...client.CallOption) (*RpcExistCIServerByAppIDRes, error)
}

type serverService struct {
	c    client.Client
	name string
}

func NewServerService(name string, c client.Client) ServerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "server"
	}
	return &serverService{
		c:    c,
		name: name,
	}
}

func (c *serverService) Add(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.Add", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Delete(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.Delete", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Update(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.Update", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Query(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.Query", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) List(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.List", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) BuildInit(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.BuildInit", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Build(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.Build", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) BuildProcess(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.BuildProcess", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) SetBuildVersion(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.SetBuildVersion", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) BuildStop(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.BuildStop", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) VersionList(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.VersionList", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) SFTPFileList(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.SFTPFileList", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) BuildLog(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Server.BuildLog", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) RpcVersionList(ctx context.Context, in *RpcVersionListReq, opts ...client.CallOption) (*RpcVersionListRes, error) {
	req := c.c.NewRequest(c.name, "Server.RpcVersionList", in)
	out := new(RpcVersionListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) RpcQuery(ctx context.Context, in *RpcQueryReq, opts ...client.CallOption) (*RpcQueryRes, error) {
	req := c.c.NewRequest(c.name, "Server.RpcQuery", in)
	out := new(RpcQueryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) RpcBuildQuery(ctx context.Context, in *RpcBuildQueryReq, opts ...client.CallOption) (*RpcBuildQueryRes, error) {
	req := c.c.NewRequest(c.name, "Server.RpcBuildQuery", in)
	out := new(RpcBuildQueryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) RpcDeleteByAppID(ctx context.Context, in *RpcDeleteByAppIDReq, opts ...client.CallOption) (*RpcDeleteByAppIDRes, error) {
	req := c.c.NewRequest(c.name, "Server.RpcDeleteByAppID", in)
	out := new(RpcDeleteByAppIDRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) RpcExistCIServerByAppID(ctx context.Context, in *RpcExistCIServerByAppIDReq, opts ...client.CallOption) (*RpcExistCIServerByAppIDRes, error) {
	req := c.c.NewRequest(c.name, "Server.RpcExistCIServerByAppID", in)
	out := new(RpcExistCIServerByAppIDRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Server service

type ServerHandler interface {
	Add(context.Context, *proto1.Request, *proto1.Response) error
	Delete(context.Context, *proto1.Request, *proto1.Response) error
	Update(context.Context, *proto1.Request, *proto1.Response) error
	Query(context.Context, *proto1.Request, *proto1.Response) error
	List(context.Context, *proto1.Request, *proto1.Response) error
	BuildInit(context.Context, *proto1.Request, *proto1.Response) error
	Build(context.Context, *proto1.Request, *proto1.Response) error
	BuildProcess(context.Context, *proto1.Request, *proto1.Response) error
	SetBuildVersion(context.Context, *proto1.Request, *proto1.Response) error
	BuildStop(context.Context, *proto1.Request, *proto1.Response) error
	VersionList(context.Context, *proto1.Request, *proto1.Response) error
	SFTPFileList(context.Context, *proto1.Request, *proto1.Response) error
	BuildLog(context.Context, *proto1.Request, *proto1.Response) error
	RpcVersionList(context.Context, *RpcVersionListReq, *RpcVersionListRes) error
	RpcQuery(context.Context, *RpcQueryReq, *RpcQueryRes) error
	RpcBuildQuery(context.Context, *RpcBuildQueryReq, *RpcBuildQueryRes) error
	RpcDeleteByAppID(context.Context, *RpcDeleteByAppIDReq, *RpcDeleteByAppIDRes) error
	RpcExistCIServerByAppID(context.Context, *RpcExistCIServerByAppIDReq, *RpcExistCIServerByAppIDRes) error
}

func RegisterServerHandler(s server.Server, hdlr ServerHandler, opts ...server.HandlerOption) error {
	type server interface {
		Add(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Delete(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Update(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Query(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		List(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		BuildInit(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Build(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		BuildProcess(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		SetBuildVersion(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		BuildStop(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		VersionList(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		SFTPFileList(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		BuildLog(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		RpcVersionList(ctx context.Context, in *RpcVersionListReq, out *RpcVersionListRes) error
		RpcQuery(ctx context.Context, in *RpcQueryReq, out *RpcQueryRes) error
		RpcBuildQuery(ctx context.Context, in *RpcBuildQueryReq, out *RpcBuildQueryRes) error
		RpcDeleteByAppID(ctx context.Context, in *RpcDeleteByAppIDReq, out *RpcDeleteByAppIDRes) error
		RpcExistCIServerByAppID(ctx context.Context, in *RpcExistCIServerByAppIDReq, out *RpcExistCIServerByAppIDRes) error
	}
	type Server struct {
		server
	}
	h := &serverHandler{hdlr}
	return s.Handle(s.NewHandler(&Server{h}, opts...))
}

type serverHandler struct {
	ServerHandler
}

func (h *serverHandler) Add(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.Add(ctx, in, out)
}

func (h *serverHandler) Delete(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.Delete(ctx, in, out)
}

func (h *serverHandler) Update(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.Update(ctx, in, out)
}

func (h *serverHandler) Query(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.Query(ctx, in, out)
}

func (h *serverHandler) List(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.List(ctx, in, out)
}

func (h *serverHandler) BuildInit(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.BuildInit(ctx, in, out)
}

func (h *serverHandler) Build(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.Build(ctx, in, out)
}

func (h *serverHandler) BuildProcess(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.BuildProcess(ctx, in, out)
}

func (h *serverHandler) SetBuildVersion(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.SetBuildVersion(ctx, in, out)
}

func (h *serverHandler) BuildStop(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.BuildStop(ctx, in, out)
}

func (h *serverHandler) VersionList(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.VersionList(ctx, in, out)
}

func (h *serverHandler) SFTPFileList(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.SFTPFileList(ctx, in, out)
}

func (h *serverHandler) BuildLog(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ServerHandler.BuildLog(ctx, in, out)
}

func (h *serverHandler) RpcVersionList(ctx context.Context, in *RpcVersionListReq, out *RpcVersionListRes) error {
	return h.ServerHandler.RpcVersionList(ctx, in, out)
}

func (h *serverHandler) RpcQuery(ctx context.Context, in *RpcQueryReq, out *RpcQueryRes) error {
	return h.ServerHandler.RpcQuery(ctx, in, out)
}

func (h *serverHandler) RpcBuildQuery(ctx context.Context, in *RpcBuildQueryReq, out *RpcBuildQueryRes) error {
	return h.ServerHandler.RpcBuildQuery(ctx, in, out)
}

func (h *serverHandler) RpcDeleteByAppID(ctx context.Context, in *RpcDeleteByAppIDReq, out *RpcDeleteByAppIDRes) error {
	return h.ServerHandler.RpcDeleteByAppID(ctx, in, out)
}

func (h *serverHandler) RpcExistCIServerByAppID(ctx context.Context, in *RpcExistCIServerByAppIDReq, out *RpcExistCIServerByAppIDRes) error {
	return h.ServerHandler.RpcExistCIServerByAppID(ctx, in, out)
}
