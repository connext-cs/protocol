// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: project.proto

/*
Package project is a generated protocol buffer package.

It is generated from these files:
	project.proto

It has these top-level messages:
*/
package project

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Project service

type ProjectService interface {
	Newprojectcheck(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Newproject(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectlist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectcompiledata(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectimagedate(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ProjectWarehouseAddress(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Delproject(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Rollbackproject(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Stopproject(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Updateproject(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectrelease(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectreleasehistory(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectreleasejobloghistroy(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectreleaseinfo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Releaseprojectstatus(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectpodlist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Updatecodelog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectsonarlog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectcompilelog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectbuildimagelog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectreleasecdlog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Projectbaseinfo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Updatepodnumber(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Searchprojectlog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Viewprojectlog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdateProjectInnerNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	NewProjectInnerNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DelProjectInnerNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	NewProjectExternalNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	CheckProjectExternalNetworkDomain(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdateProjectExternalNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DelProjectExternalNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	//    rpc Projectstatusinfo(go.api.Request) returns (go.api.Response) {}
	Projectsummarize(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Addprojectconfig(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Deleteprojectconfig(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Updateprojectconfig(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Querydefaultconfig(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Resourceconfig(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	QueryProjectNotice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	//    rpc Query_pod_event(go.api.Request) returns (go.api.Response) {}
	QueryPodListEvent(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	QueryProjectSonarStatus(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	QueryProjectReleasing(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Checkprojectversion(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Checkprojectname(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	LogTemplet(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	LogTempletInfo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	NewLogTemplet(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeleteLogTemplet(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type projectService struct {
	c    client.Client
	name string
}

func NewProjectService(name string, c client.Client) ProjectService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "project"
	}
	return &projectService{
		c:    c,
		name: name,
	}
}

func (c *projectService) Newprojectcheck(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Newprojectcheck", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Newproject(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Newproject", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectlist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectlist", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectcompiledata(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectcompiledata", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectimagedate(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectimagedate", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) ProjectWarehouseAddress(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Project_warehouse_address", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Delproject(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Delproject", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Rollbackproject(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Rollbackproject", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Stopproject(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Stopproject", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Updateproject(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Updateproject", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectrelease(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectrelease", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectreleasehistory(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectreleasehistory", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectreleasejobloghistroy(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectreleasejobloghistroy", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectreleaseinfo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectreleaseinfo", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Releaseprojectstatus(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Releaseprojectstatus", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectpodlist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectpodlist", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Updatecodelog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Updatecodelog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectsonarlog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectsonarlog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectcompilelog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectcompilelog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectbuildimagelog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectbuildimagelog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectreleasecdlog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectreleasecdlog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectbaseinfo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectbaseinfo", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Updatepodnumber(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Updatepodnumber", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Searchprojectlog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Searchprojectlog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Viewprojectlog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Viewprojectlog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) UpdateProjectInnerNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Update_project_inner_network", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) NewProjectInnerNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.New_project_inner_network", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) DelProjectInnerNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Del_project_inner_network", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) NewProjectExternalNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.New_project_external_network", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) CheckProjectExternalNetworkDomain(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Check_project_external_network_domain", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) UpdateProjectExternalNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Update_project_external_network", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) DelProjectExternalNetwork(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Del_project_external_network", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Projectsummarize(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Projectsummarize", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Addprojectconfig(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Addprojectconfig", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Deleteprojectconfig(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Deleteprojectconfig", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Updateprojectconfig(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Updateprojectconfig", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Querydefaultconfig(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Querydefaultconfig", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Resourceconfig(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Resourceconfig", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) QueryProjectNotice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Query_project_notice", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) QueryPodListEvent(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Query_pod_list_event", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) QueryProjectSonarStatus(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Query_project_sonar_status", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) QueryProjectReleasing(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Query_project_releasing", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Checkprojectversion(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Checkprojectversion", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Checkprojectname(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.Checkprojectname", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) LogTemplet(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.LogTemplet", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) LogTempletInfo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.LogTempletInfo", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) NewLogTemplet(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.NewLogTemplet", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) DeleteLogTemplet(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Project.DeleteLogTemplet", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Project service

type ProjectHandler interface {
	Newprojectcheck(context.Context, *go_api.Request, *go_api.Response) error
	Newproject(context.Context, *go_api.Request, *go_api.Response) error
	Projectlist(context.Context, *go_api.Request, *go_api.Response) error
	Projectcompiledata(context.Context, *go_api.Request, *go_api.Response) error
	Projectimagedate(context.Context, *go_api.Request, *go_api.Response) error
	ProjectWarehouseAddress(context.Context, *go_api.Request, *go_api.Response) error
	Delproject(context.Context, *go_api.Request, *go_api.Response) error
	Rollbackproject(context.Context, *go_api.Request, *go_api.Response) error
	Stopproject(context.Context, *go_api.Request, *go_api.Response) error
	Updateproject(context.Context, *go_api.Request, *go_api.Response) error
	Projectrelease(context.Context, *go_api.Request, *go_api.Response) error
	Projectreleasehistory(context.Context, *go_api.Request, *go_api.Response) error
	Projectreleasejobloghistroy(context.Context, *go_api.Request, *go_api.Response) error
	Projectreleaseinfo(context.Context, *go_api.Request, *go_api.Response) error
	Releaseprojectstatus(context.Context, *go_api.Request, *go_api.Response) error
	Projectpodlist(context.Context, *go_api.Request, *go_api.Response) error
	Updatecodelog(context.Context, *go_api.Request, *go_api.Response) error
	Projectsonarlog(context.Context, *go_api.Request, *go_api.Response) error
	Projectcompilelog(context.Context, *go_api.Request, *go_api.Response) error
	Projectbuildimagelog(context.Context, *go_api.Request, *go_api.Response) error
	Projectreleasecdlog(context.Context, *go_api.Request, *go_api.Response) error
	Projectbaseinfo(context.Context, *go_api.Request, *go_api.Response) error
	Updatepodnumber(context.Context, *go_api.Request, *go_api.Response) error
	Searchprojectlog(context.Context, *go_api.Request, *go_api.Response) error
	Viewprojectlog(context.Context, *go_api.Request, *go_api.Response) error
	UpdateProjectInnerNetwork(context.Context, *go_api.Request, *go_api.Response) error
	NewProjectInnerNetwork(context.Context, *go_api.Request, *go_api.Response) error
	DelProjectInnerNetwork(context.Context, *go_api.Request, *go_api.Response) error
	NewProjectExternalNetwork(context.Context, *go_api.Request, *go_api.Response) error
	CheckProjectExternalNetworkDomain(context.Context, *go_api.Request, *go_api.Response) error
	UpdateProjectExternalNetwork(context.Context, *go_api.Request, *go_api.Response) error
	DelProjectExternalNetwork(context.Context, *go_api.Request, *go_api.Response) error
	//    rpc Projectstatusinfo(go.api.Request) returns (go.api.Response) {}
	Projectsummarize(context.Context, *go_api.Request, *go_api.Response) error
	Addprojectconfig(context.Context, *go_api.Request, *go_api.Response) error
	Deleteprojectconfig(context.Context, *go_api.Request, *go_api.Response) error
	Updateprojectconfig(context.Context, *go_api.Request, *go_api.Response) error
	Querydefaultconfig(context.Context, *go_api.Request, *go_api.Response) error
	Resourceconfig(context.Context, *go_api.Request, *go_api.Response) error
	QueryProjectNotice(context.Context, *go_api.Request, *go_api.Response) error
	//    rpc Query_pod_event(go.api.Request) returns (go.api.Response) {}
	QueryPodListEvent(context.Context, *go_api.Request, *go_api.Response) error
	QueryProjectSonarStatus(context.Context, *go_api.Request, *go_api.Response) error
	QueryProjectReleasing(context.Context, *go_api.Request, *go_api.Response) error
	Checkprojectversion(context.Context, *go_api.Request, *go_api.Response) error
	Checkprojectname(context.Context, *go_api.Request, *go_api.Response) error
	LogTemplet(context.Context, *go_api.Request, *go_api.Response) error
	LogTempletInfo(context.Context, *go_api.Request, *go_api.Response) error
	NewLogTemplet(context.Context, *go_api.Request, *go_api.Response) error
	DeleteLogTemplet(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterProjectHandler(s server.Server, hdlr ProjectHandler, opts ...server.HandlerOption) {
	type project interface {
		Newprojectcheck(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Newproject(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectlist(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectcompiledata(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectimagedate(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ProjectWarehouseAddress(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Delproject(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Rollbackproject(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Stopproject(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Updateproject(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectrelease(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectreleasehistory(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectreleasejobloghistroy(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectreleaseinfo(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Releaseprojectstatus(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectpodlist(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Updatecodelog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectsonarlog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectcompilelog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectbuildimagelog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectreleasecdlog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectbaseinfo(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Updatepodnumber(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Searchprojectlog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Viewprojectlog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateProjectInnerNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		NewProjectInnerNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DelProjectInnerNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		NewProjectExternalNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		CheckProjectExternalNetworkDomain(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateProjectExternalNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DelProjectExternalNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Projectsummarize(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Addprojectconfig(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Deleteprojectconfig(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Updateprojectconfig(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Querydefaultconfig(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Resourceconfig(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		QueryProjectNotice(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		QueryPodListEvent(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		QueryProjectSonarStatus(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		QueryProjectReleasing(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Checkprojectversion(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Checkprojectname(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		LogTemplet(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		LogTempletInfo(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		NewLogTemplet(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeleteLogTemplet(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type Project struct {
		project
	}
	h := &projectHandler{hdlr}
	s.Handle(s.NewHandler(&Project{h}, opts...))
}

type projectHandler struct {
	ProjectHandler
}

func (h *projectHandler) Newprojectcheck(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Newprojectcheck(ctx, in, out)
}

func (h *projectHandler) Newproject(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Newproject(ctx, in, out)
}

func (h *projectHandler) Projectlist(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectlist(ctx, in, out)
}

func (h *projectHandler) Projectcompiledata(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectcompiledata(ctx, in, out)
}

func (h *projectHandler) Projectimagedate(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectimagedate(ctx, in, out)
}

func (h *projectHandler) ProjectWarehouseAddress(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.ProjectWarehouseAddress(ctx, in, out)
}

func (h *projectHandler) Delproject(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Delproject(ctx, in, out)
}

func (h *projectHandler) Rollbackproject(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Rollbackproject(ctx, in, out)
}

func (h *projectHandler) Stopproject(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Stopproject(ctx, in, out)
}

func (h *projectHandler) Updateproject(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Updateproject(ctx, in, out)
}

func (h *projectHandler) Projectrelease(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectrelease(ctx, in, out)
}

func (h *projectHandler) Projectreleasehistory(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectreleasehistory(ctx, in, out)
}

func (h *projectHandler) Projectreleasejobloghistroy(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectreleasejobloghistroy(ctx, in, out)
}

func (h *projectHandler) Projectreleaseinfo(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectreleaseinfo(ctx, in, out)
}

func (h *projectHandler) Releaseprojectstatus(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Releaseprojectstatus(ctx, in, out)
}

func (h *projectHandler) Projectpodlist(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectpodlist(ctx, in, out)
}

func (h *projectHandler) Updatecodelog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Updatecodelog(ctx, in, out)
}

func (h *projectHandler) Projectsonarlog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectsonarlog(ctx, in, out)
}

func (h *projectHandler) Projectcompilelog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectcompilelog(ctx, in, out)
}

func (h *projectHandler) Projectbuildimagelog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectbuildimagelog(ctx, in, out)
}

func (h *projectHandler) Projectreleasecdlog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectreleasecdlog(ctx, in, out)
}

func (h *projectHandler) Projectbaseinfo(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectbaseinfo(ctx, in, out)
}

func (h *projectHandler) Updatepodnumber(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Updatepodnumber(ctx, in, out)
}

func (h *projectHandler) Searchprojectlog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Searchprojectlog(ctx, in, out)
}

func (h *projectHandler) Viewprojectlog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Viewprojectlog(ctx, in, out)
}

func (h *projectHandler) UpdateProjectInnerNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.UpdateProjectInnerNetwork(ctx, in, out)
}

func (h *projectHandler) NewProjectInnerNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.NewProjectInnerNetwork(ctx, in, out)
}

func (h *projectHandler) DelProjectInnerNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.DelProjectInnerNetwork(ctx, in, out)
}

func (h *projectHandler) NewProjectExternalNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.NewProjectExternalNetwork(ctx, in, out)
}

func (h *projectHandler) CheckProjectExternalNetworkDomain(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.CheckProjectExternalNetworkDomain(ctx, in, out)
}

func (h *projectHandler) UpdateProjectExternalNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.UpdateProjectExternalNetwork(ctx, in, out)
}

func (h *projectHandler) DelProjectExternalNetwork(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.DelProjectExternalNetwork(ctx, in, out)
}

func (h *projectHandler) Projectsummarize(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Projectsummarize(ctx, in, out)
}

func (h *projectHandler) Addprojectconfig(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Addprojectconfig(ctx, in, out)
}

func (h *projectHandler) Deleteprojectconfig(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Deleteprojectconfig(ctx, in, out)
}

func (h *projectHandler) Updateprojectconfig(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Updateprojectconfig(ctx, in, out)
}

func (h *projectHandler) Querydefaultconfig(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Querydefaultconfig(ctx, in, out)
}

func (h *projectHandler) Resourceconfig(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Resourceconfig(ctx, in, out)
}

func (h *projectHandler) QueryProjectNotice(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.QueryProjectNotice(ctx, in, out)
}

func (h *projectHandler) QueryPodListEvent(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.QueryPodListEvent(ctx, in, out)
}

func (h *projectHandler) QueryProjectSonarStatus(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.QueryProjectSonarStatus(ctx, in, out)
}

func (h *projectHandler) QueryProjectReleasing(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.QueryProjectReleasing(ctx, in, out)
}

func (h *projectHandler) Checkprojectversion(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Checkprojectversion(ctx, in, out)
}

func (h *projectHandler) Checkprojectname(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.Checkprojectname(ctx, in, out)
}

func (h *projectHandler) LogTemplet(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.LogTemplet(ctx, in, out)
}

func (h *projectHandler) LogTempletInfo(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.LogTempletInfo(ctx, in, out)
}

func (h *projectHandler) NewLogTemplet(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.NewLogTemplet(ctx, in, out)
}

func (h *projectHandler) DeleteLogTemplet(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ProjectHandler.DeleteLogTemplet(ctx, in, out)
}

// Client API for Service service

type Service interface {
	Servicelist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Newservice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Servicecreatelist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Updateservice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Delservice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Restartservice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Servicedetail(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Serviceparams(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Viewservicelog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Searchservicelog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Externalmanagement(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type service struct {
	c    client.Client
	name string
}

func NewService(name string, c client.Client) Service {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "service"
	}
	return &service{
		c:    c,
		name: name,
	}
}

func (c *service) Servicelist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Servicelist", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Newservice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Newservice", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Servicecreatelist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Servicecreatelist", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Updateservice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Updateservice", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Delservice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Delservice", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Restartservice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Restartservice", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Servicedetail(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Servicedetail", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Serviceparams(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Serviceparams", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Viewservicelog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Viewservicelog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Searchservicelog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Searchservicelog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Externalmanagement(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Service.Externalmanagement", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	Servicelist(context.Context, *go_api.Request, *go_api.Response) error
	Newservice(context.Context, *go_api.Request, *go_api.Response) error
	Servicecreatelist(context.Context, *go_api.Request, *go_api.Response) error
	Updateservice(context.Context, *go_api.Request, *go_api.Response) error
	Delservice(context.Context, *go_api.Request, *go_api.Response) error
	Restartservice(context.Context, *go_api.Request, *go_api.Response) error
	Servicedetail(context.Context, *go_api.Request, *go_api.Response) error
	Serviceparams(context.Context, *go_api.Request, *go_api.Response) error
	Viewservicelog(context.Context, *go_api.Request, *go_api.Response) error
	Searchservicelog(context.Context, *go_api.Request, *go_api.Response) error
	Externalmanagement(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) {
	type service interface {
		Servicelist(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Newservice(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Servicecreatelist(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Updateservice(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Delservice(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Restartservice(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Servicedetail(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Serviceparams(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Viewservicelog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Searchservicelog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Externalmanagement(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type Service struct {
		service
	}
	h := &serviceHandler{hdlr}
	s.Handle(s.NewHandler(&Service{h}, opts...))
}

type serviceHandler struct {
	ServiceHandler
}

func (h *serviceHandler) Servicelist(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Servicelist(ctx, in, out)
}

func (h *serviceHandler) Newservice(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Newservice(ctx, in, out)
}

func (h *serviceHandler) Servicecreatelist(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Servicecreatelist(ctx, in, out)
}

func (h *serviceHandler) Updateservice(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Updateservice(ctx, in, out)
}

func (h *serviceHandler) Delservice(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Delservice(ctx, in, out)
}

func (h *serviceHandler) Restartservice(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Restartservice(ctx, in, out)
}

func (h *serviceHandler) Servicedetail(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Servicedetail(ctx, in, out)
}

func (h *serviceHandler) Serviceparams(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Serviceparams(ctx, in, out)
}

func (h *serviceHandler) Viewservicelog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Viewservicelog(ctx, in, out)
}

func (h *serviceHandler) Searchservicelog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Searchservicelog(ctx, in, out)
}

func (h *serviceHandler) Externalmanagement(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ServiceHandler.Externalmanagement(ctx, in, out)
}
