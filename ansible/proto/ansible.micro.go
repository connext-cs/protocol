// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ansible.proto

/*
Package ansible is a generated protocol buffer package.

It is generated from these files:
	ansible.proto

It has these top-level messages:
	Host
	Config
	ConfigList
	HostList
	Git
	Role
	RoleList
	Tag
	TagList
	VarList
	PlayBook
	LogRequest
	Response
	StatusResponse
	K8SScaleNodeRequest
	K8SDeleteNodeRequest
*/
package ansible

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Ansible service

type AnsibleService interface {
	// Deploy, fabuxiangmu.
	//
	Deploy(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error)
	Delete(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error)
	RollBack(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error)
	// rpc Update(PlayBook) returns (Response);
	Stop(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error)
	Start(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error)
	Restart(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error)
	Status(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*StatusResponse, error)
	CheckHost(ctx context.Context, in *HostList, opts ...client.CallOption) (*StatusResponse, error)
	KsScaleNodes(ctx context.Context, in *K8SScaleNodeRequest, opts ...client.CallOption) (*Response, error)
	KsDeleteNodes(ctx context.Context, in *K8SDeleteNodeRequest, opts ...client.CallOption) (*Response, error)
	Logs(ctx context.Context, in *LogRequest, opts ...client.CallOption) (*Response, error)
}

type ansibleService struct {
	c    client.Client
	name string
}

func NewAnsibleService(name string, c client.Client) AnsibleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "ansible"
	}
	return &ansibleService{
		c:    c,
		name: name,
	}
}

func (c *ansibleService) Deploy(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ansible.Deploy", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleService) Delete(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ansible.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleService) RollBack(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ansible.RollBack", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleService) Stop(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ansible.Stop", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleService) Start(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ansible.Start", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleService) Restart(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ansible.Restart", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleService) Status(ctx context.Context, in *PlayBook, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.name, "Ansible.Status", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleService) CheckHost(ctx context.Context, in *HostList, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.name, "Ansible.CheckHost", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleService) KsScaleNodes(ctx context.Context, in *K8SScaleNodeRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ansible.KsScaleNodes", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleService) KsDeleteNodes(ctx context.Context, in *K8SDeleteNodeRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ansible.KsDeleteNodes", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ansibleService) Logs(ctx context.Context, in *LogRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ansible.Logs", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ansible service

type AnsibleHandler interface {
	// Deploy, fabuxiangmu.
	//
	Deploy(context.Context, *PlayBook, *Response) error
	Delete(context.Context, *PlayBook, *Response) error
	RollBack(context.Context, *PlayBook, *Response) error
	// rpc Update(PlayBook) returns (Response);
	Stop(context.Context, *PlayBook, *Response) error
	Start(context.Context, *PlayBook, *Response) error
	Restart(context.Context, *PlayBook, *Response) error
	Status(context.Context, *PlayBook, *StatusResponse) error
	CheckHost(context.Context, *HostList, *StatusResponse) error
	KsScaleNodes(context.Context, *K8SScaleNodeRequest, *Response) error
	KsDeleteNodes(context.Context, *K8SDeleteNodeRequest, *Response) error
	Logs(context.Context, *LogRequest, *Response) error
}

func RegisterAnsibleHandler(s server.Server, hdlr AnsibleHandler, opts ...server.HandlerOption) {
	type ansible interface {
		Deploy(ctx context.Context, in *PlayBook, out *Response) error
		Delete(ctx context.Context, in *PlayBook, out *Response) error
		RollBack(ctx context.Context, in *PlayBook, out *Response) error
		Stop(ctx context.Context, in *PlayBook, out *Response) error
		Start(ctx context.Context, in *PlayBook, out *Response) error
		Restart(ctx context.Context, in *PlayBook, out *Response) error
		Status(ctx context.Context, in *PlayBook, out *StatusResponse) error
		CheckHost(ctx context.Context, in *HostList, out *StatusResponse) error
		KsScaleNodes(ctx context.Context, in *K8SScaleNodeRequest, out *Response) error
		KsDeleteNodes(ctx context.Context, in *K8SDeleteNodeRequest, out *Response) error
		Logs(ctx context.Context, in *LogRequest, out *Response) error
	}
	type Ansible struct {
		ansible
	}
	h := &ansibleHandler{hdlr}
	s.Handle(s.NewHandler(&Ansible{h}, opts...))
}

type ansibleHandler struct {
	AnsibleHandler
}

func (h *ansibleHandler) Deploy(ctx context.Context, in *PlayBook, out *Response) error {
	return h.AnsibleHandler.Deploy(ctx, in, out)
}

func (h *ansibleHandler) Delete(ctx context.Context, in *PlayBook, out *Response) error {
	return h.AnsibleHandler.Delete(ctx, in, out)
}

func (h *ansibleHandler) RollBack(ctx context.Context, in *PlayBook, out *Response) error {
	return h.AnsibleHandler.RollBack(ctx, in, out)
}

func (h *ansibleHandler) Stop(ctx context.Context, in *PlayBook, out *Response) error {
	return h.AnsibleHandler.Stop(ctx, in, out)
}

func (h *ansibleHandler) Start(ctx context.Context, in *PlayBook, out *Response) error {
	return h.AnsibleHandler.Start(ctx, in, out)
}

func (h *ansibleHandler) Restart(ctx context.Context, in *PlayBook, out *Response) error {
	return h.AnsibleHandler.Restart(ctx, in, out)
}

func (h *ansibleHandler) Status(ctx context.Context, in *PlayBook, out *StatusResponse) error {
	return h.AnsibleHandler.Status(ctx, in, out)
}

func (h *ansibleHandler) CheckHost(ctx context.Context, in *HostList, out *StatusResponse) error {
	return h.AnsibleHandler.CheckHost(ctx, in, out)
}

func (h *ansibleHandler) KsScaleNodes(ctx context.Context, in *K8SScaleNodeRequest, out *Response) error {
	return h.AnsibleHandler.KsScaleNodes(ctx, in, out)
}

func (h *ansibleHandler) KsDeleteNodes(ctx context.Context, in *K8SDeleteNodeRequest, out *Response) error {
	return h.AnsibleHandler.KsDeleteNodes(ctx, in, out)
}

func (h *ansibleHandler) Logs(ctx context.Context, in *LogRequest, out *Response) error {
	return h.AnsibleHandler.Logs(ctx, in, out)
}
