// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: vmdeploy.proto

/*
Package vmdeploy is a generated protocol buffer package.

It is generated from these files:
	vmdeploy.proto

It has these top-level messages:
	CIBase
	DeploymentList
	DeploymentInfo
	DeploymentID
	NewSingleDeploymentInfo
	SingleDeploymentInfo
	UpdateSingleDeploymentInfo
	UpdateResult
	SingleDeploymentID
	IfHostLinkDeployReq
	IfHostLinkDeployRes
*/
package vmdeploy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Deployment service

type DeploymentService interface {
	QueryDeploymentList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	NewDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdateDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeleteDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	QueryDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeleteDeploymentHost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AddDeploymentHost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ReleaseDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeploymentHostReleaseLog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeploymentHostReleaseHistory(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	QueryDeploymentHostList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	StopDeploymentHost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeploymentReleaseHostList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdateHostDeployTag(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 通过CIID获取deployment列表
	RpcQueryCiDeploymentList(ctx context.Context, in *CIBase, opts ...client.CallOption) (*DeploymentList, error)
	// 获取deployment信息
	RpcQueryDeployment(ctx context.Context, in *DeploymentID, opts ...client.CallOption) (*DeploymentInfo, error)
	IfHostLinkDeploy(ctx context.Context, in *IfHostLinkDeployReq, opts ...client.CallOption) (*IfHostLinkDeployRes, error)
}

type deploymentService struct {
	c    client.Client
	name string
}

func NewDeploymentService(name string, c client.Client) DeploymentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "deployment"
	}
	return &deploymentService{
		c:    c,
		name: name,
	}
}

func (c *deploymentService) QueryDeploymentList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.QueryDeploymentList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) NewDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.NewDeployment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) UpdateDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.UpdateDeployment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) DeleteDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.DeleteDeployment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) QueryDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.QueryDeployment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) DeleteDeploymentHost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.DeleteDeploymentHost", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) AddDeploymentHost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.AddDeploymentHost", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) ReleaseDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.ReleaseDeployment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) DeploymentHostReleaseLog(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.DeploymentHostReleaseLog", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) DeploymentHostReleaseHistory(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.DeploymentHostReleaseHistory", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) QueryDeploymentHostList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.QueryDeploymentHostList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) StopDeploymentHost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.StopDeploymentHost", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) DeploymentReleaseHostList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.DeploymentReleaseHostList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) UpdateHostDeployTag(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Deployment.UpdateHostDeployTag", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) RpcQueryCiDeploymentList(ctx context.Context, in *CIBase, opts ...client.CallOption) (*DeploymentList, error) {
	req := c.c.NewRequest(c.name, "Deployment.RpcQueryCiDeploymentList", in)
	out := new(DeploymentList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) RpcQueryDeployment(ctx context.Context, in *DeploymentID, opts ...client.CallOption) (*DeploymentInfo, error) {
	req := c.c.NewRequest(c.name, "Deployment.RpcQueryDeployment", in)
	out := new(DeploymentInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentService) IfHostLinkDeploy(ctx context.Context, in *IfHostLinkDeployReq, opts ...client.CallOption) (*IfHostLinkDeployRes, error) {
	req := c.c.NewRequest(c.name, "Deployment.IfHostLinkDeploy", in)
	out := new(IfHostLinkDeployRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Deployment service

type DeploymentHandler interface {
	QueryDeploymentList(context.Context, *go_api.Request, *go_api.Response) error
	NewDeployment(context.Context, *go_api.Request, *go_api.Response) error
	UpdateDeployment(context.Context, *go_api.Request, *go_api.Response) error
	DeleteDeployment(context.Context, *go_api.Request, *go_api.Response) error
	QueryDeployment(context.Context, *go_api.Request, *go_api.Response) error
	DeleteDeploymentHost(context.Context, *go_api.Request, *go_api.Response) error
	AddDeploymentHost(context.Context, *go_api.Request, *go_api.Response) error
	ReleaseDeployment(context.Context, *go_api.Request, *go_api.Response) error
	DeploymentHostReleaseLog(context.Context, *go_api.Request, *go_api.Response) error
	DeploymentHostReleaseHistory(context.Context, *go_api.Request, *go_api.Response) error
	QueryDeploymentHostList(context.Context, *go_api.Request, *go_api.Response) error
	StopDeploymentHost(context.Context, *go_api.Request, *go_api.Response) error
	DeploymentReleaseHostList(context.Context, *go_api.Request, *go_api.Response) error
	UpdateHostDeployTag(context.Context, *go_api.Request, *go_api.Response) error
	// 通过CIID获取deployment列表
	RpcQueryCiDeploymentList(context.Context, *CIBase, *DeploymentList) error
	// 获取deployment信息
	RpcQueryDeployment(context.Context, *DeploymentID, *DeploymentInfo) error
	IfHostLinkDeploy(context.Context, *IfHostLinkDeployReq, *IfHostLinkDeployRes) error
}

func RegisterDeploymentHandler(s server.Server, hdlr DeploymentHandler, opts ...server.HandlerOption) {
	type deployment interface {
		QueryDeploymentList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		NewDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeleteDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		QueryDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeleteDeploymentHost(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AddDeploymentHost(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ReleaseDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeploymentHostReleaseLog(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeploymentHostReleaseHistory(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		QueryDeploymentHostList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		StopDeploymentHost(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeploymentReleaseHostList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateHostDeployTag(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RpcQueryCiDeploymentList(ctx context.Context, in *CIBase, out *DeploymentList) error
		RpcQueryDeployment(ctx context.Context, in *DeploymentID, out *DeploymentInfo) error
		IfHostLinkDeploy(ctx context.Context, in *IfHostLinkDeployReq, out *IfHostLinkDeployRes) error
	}
	type Deployment struct {
		deployment
	}
	h := &deploymentHandler{hdlr}
	s.Handle(s.NewHandler(&Deployment{h}, opts...))
}

type deploymentHandler struct {
	DeploymentHandler
}

func (h *deploymentHandler) QueryDeploymentList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.QueryDeploymentList(ctx, in, out)
}

func (h *deploymentHandler) NewDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.NewDeployment(ctx, in, out)
}

func (h *deploymentHandler) UpdateDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.UpdateDeployment(ctx, in, out)
}

func (h *deploymentHandler) DeleteDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.DeleteDeployment(ctx, in, out)
}

func (h *deploymentHandler) QueryDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.QueryDeployment(ctx, in, out)
}

func (h *deploymentHandler) DeleteDeploymentHost(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.DeleteDeploymentHost(ctx, in, out)
}

func (h *deploymentHandler) AddDeploymentHost(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.AddDeploymentHost(ctx, in, out)
}

func (h *deploymentHandler) ReleaseDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.ReleaseDeployment(ctx, in, out)
}

func (h *deploymentHandler) DeploymentHostReleaseLog(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.DeploymentHostReleaseLog(ctx, in, out)
}

func (h *deploymentHandler) DeploymentHostReleaseHistory(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.DeploymentHostReleaseHistory(ctx, in, out)
}

func (h *deploymentHandler) QueryDeploymentHostList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.QueryDeploymentHostList(ctx, in, out)
}

func (h *deploymentHandler) StopDeploymentHost(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.StopDeploymentHost(ctx, in, out)
}

func (h *deploymentHandler) DeploymentReleaseHostList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.DeploymentReleaseHostList(ctx, in, out)
}

func (h *deploymentHandler) UpdateHostDeployTag(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DeploymentHandler.UpdateHostDeployTag(ctx, in, out)
}

func (h *deploymentHandler) RpcQueryCiDeploymentList(ctx context.Context, in *CIBase, out *DeploymentList) error {
	return h.DeploymentHandler.RpcQueryCiDeploymentList(ctx, in, out)
}

func (h *deploymentHandler) RpcQueryDeployment(ctx context.Context, in *DeploymentID, out *DeploymentInfo) error {
	return h.DeploymentHandler.RpcQueryDeployment(ctx, in, out)
}

func (h *deploymentHandler) IfHostLinkDeploy(ctx context.Context, in *IfHostLinkDeployReq, out *IfHostLinkDeployRes) error {
	return h.DeploymentHandler.IfHostLinkDeploy(ctx, in, out)
}

// Client API for Templet service

type TempletService interface {
	QueryTempletList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type templetService struct {
	c    client.Client
	name string
}

func NewTempletService(name string, c client.Client) TempletService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "templet"
	}
	return &templetService{
		c:    c,
		name: name,
	}
}

func (c *templetService) QueryTempletList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Templet.QueryTempletList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Templet service

type TempletHandler interface {
	QueryTempletList(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterTempletHandler(s server.Server, hdlr TempletHandler, opts ...server.HandlerOption) {
	type templet interface {
		QueryTempletList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type Templet struct {
		templet
	}
	h := &templetHandler{hdlr}
	s.Handle(s.NewHandler(&Templet{h}, opts...))
}

type templetHandler struct {
	TempletHandler
}

func (h *templetHandler) QueryTempletList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.TempletHandler.QueryTempletList(ctx, in, out)
}

// Client API for SingleDeployment service

type SingleDeploymentService interface {
	// 新增
	NewSingleDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 修改
	UpdateSingleDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 查询
	QuerySingleDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 发布
	ReleaseSingleDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 查看发布历史列表
	ReleaseSingleDeploymentHistory(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// 发布Zabbix
	ReleaseZabbixDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	// rpc新增
	RpcNewSingleDeployment(ctx context.Context, in *NewSingleDeploymentInfo, opts ...client.CallOption) (*SingleDeploymentID, error)
	// rpc修改
	RpcUpdateSingleDeployment(ctx context.Context, in *UpdateSingleDeploymentInfo, opts ...client.CallOption) (*UpdateResult, error)
	// rpc查询
	RpcQuerySingleDeployment(ctx context.Context, in *SingleDeploymentID, opts ...client.CallOption) (*SingleDeploymentInfo, error)
}

type singleDeploymentService struct {
	c    client.Client
	name string
}

func NewSingleDeploymentService(name string, c client.Client) SingleDeploymentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "singledeployment"
	}
	return &singleDeploymentService{
		c:    c,
		name: name,
	}
}

func (c *singleDeploymentService) NewSingleDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SingleDeployment.NewSingleDeployment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singleDeploymentService) UpdateSingleDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SingleDeployment.UpdateSingleDeployment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singleDeploymentService) QuerySingleDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SingleDeployment.QuerySingleDeployment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singleDeploymentService) ReleaseSingleDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SingleDeployment.ReleaseSingleDeployment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singleDeploymentService) ReleaseSingleDeploymentHistory(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SingleDeployment.ReleaseSingleDeploymentHistory", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singleDeploymentService) ReleaseZabbixDeployment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SingleDeployment.ReleaseZabbixDeployment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singleDeploymentService) RpcNewSingleDeployment(ctx context.Context, in *NewSingleDeploymentInfo, opts ...client.CallOption) (*SingleDeploymentID, error) {
	req := c.c.NewRequest(c.name, "SingleDeployment.RpcNewSingleDeployment", in)
	out := new(SingleDeploymentID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singleDeploymentService) RpcUpdateSingleDeployment(ctx context.Context, in *UpdateSingleDeploymentInfo, opts ...client.CallOption) (*UpdateResult, error) {
	req := c.c.NewRequest(c.name, "SingleDeployment.RpcUpdateSingleDeployment", in)
	out := new(UpdateResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singleDeploymentService) RpcQuerySingleDeployment(ctx context.Context, in *SingleDeploymentID, opts ...client.CallOption) (*SingleDeploymentInfo, error) {
	req := c.c.NewRequest(c.name, "SingleDeployment.RpcQuerySingleDeployment", in)
	out := new(SingleDeploymentInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SingleDeployment service

type SingleDeploymentHandler interface {
	// 新增
	NewSingleDeployment(context.Context, *go_api.Request, *go_api.Response) error
	// 修改
	UpdateSingleDeployment(context.Context, *go_api.Request, *go_api.Response) error
	// 查询
	QuerySingleDeployment(context.Context, *go_api.Request, *go_api.Response) error
	// 发布
	ReleaseSingleDeployment(context.Context, *go_api.Request, *go_api.Response) error
	// 查看发布历史列表
	ReleaseSingleDeploymentHistory(context.Context, *go_api.Request, *go_api.Response) error
	// 发布Zabbix
	ReleaseZabbixDeployment(context.Context, *go_api.Request, *go_api.Response) error
	// rpc新增
	RpcNewSingleDeployment(context.Context, *NewSingleDeploymentInfo, *SingleDeploymentID) error
	// rpc修改
	RpcUpdateSingleDeployment(context.Context, *UpdateSingleDeploymentInfo, *UpdateResult) error
	// rpc查询
	RpcQuerySingleDeployment(context.Context, *SingleDeploymentID, *SingleDeploymentInfo) error
}

func RegisterSingleDeploymentHandler(s server.Server, hdlr SingleDeploymentHandler, opts ...server.HandlerOption) {
	type singleDeployment interface {
		NewSingleDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateSingleDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		QuerySingleDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ReleaseSingleDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ReleaseSingleDeploymentHistory(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ReleaseZabbixDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RpcNewSingleDeployment(ctx context.Context, in *NewSingleDeploymentInfo, out *SingleDeploymentID) error
		RpcUpdateSingleDeployment(ctx context.Context, in *UpdateSingleDeploymentInfo, out *UpdateResult) error
		RpcQuerySingleDeployment(ctx context.Context, in *SingleDeploymentID, out *SingleDeploymentInfo) error
	}
	type SingleDeployment struct {
		singleDeployment
	}
	h := &singleDeploymentHandler{hdlr}
	s.Handle(s.NewHandler(&SingleDeployment{h}, opts...))
}

type singleDeploymentHandler struct {
	SingleDeploymentHandler
}

func (h *singleDeploymentHandler) NewSingleDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SingleDeploymentHandler.NewSingleDeployment(ctx, in, out)
}

func (h *singleDeploymentHandler) UpdateSingleDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SingleDeploymentHandler.UpdateSingleDeployment(ctx, in, out)
}

func (h *singleDeploymentHandler) QuerySingleDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SingleDeploymentHandler.QuerySingleDeployment(ctx, in, out)
}

func (h *singleDeploymentHandler) ReleaseSingleDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SingleDeploymentHandler.ReleaseSingleDeployment(ctx, in, out)
}

func (h *singleDeploymentHandler) ReleaseSingleDeploymentHistory(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SingleDeploymentHandler.ReleaseSingleDeploymentHistory(ctx, in, out)
}

func (h *singleDeploymentHandler) ReleaseZabbixDeployment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SingleDeploymentHandler.ReleaseZabbixDeployment(ctx, in, out)
}

func (h *singleDeploymentHandler) RpcNewSingleDeployment(ctx context.Context, in *NewSingleDeploymentInfo, out *SingleDeploymentID) error {
	return h.SingleDeploymentHandler.RpcNewSingleDeployment(ctx, in, out)
}

func (h *singleDeploymentHandler) RpcUpdateSingleDeployment(ctx context.Context, in *UpdateSingleDeploymentInfo, out *UpdateResult) error {
	return h.SingleDeploymentHandler.RpcUpdateSingleDeployment(ctx, in, out)
}

func (h *singleDeploymentHandler) RpcQuerySingleDeployment(ctx context.Context, in *SingleDeploymentID, out *SingleDeploymentInfo) error {
	return h.SingleDeploymentHandler.RpcQuerySingleDeployment(ctx, in, out)
}
