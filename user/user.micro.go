// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	LinkRes
	AppLink
	UserID
	AppID
	AppIDList
	HasPrivilegeReq
	HasPrivilegeRes
	UserInfo
	TokenValue
	Privilege
	PrivilegeSet
	UserURLPath
	Authorization
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	Login(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Logout(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Userlist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Ldapuserlist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Userauthorize(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	PrivilegeList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Setuserinfo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Unregisteruserlist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Deleteuser(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AuthorizeApplicationList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UnauthorizeApplicationList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AuthorizeAppIDList(ctx context.Context, in *UserID, opts ...client.CallOption) (*AppIDList, error)
	AddAppLink(ctx context.Context, in *AppLink, opts ...client.CallOption) (*LinkRes, error)
	DeleteAppLink(ctx context.Context, in *AppLink, opts ...client.CallOption) (*LinkRes, error)
	IfUserHasPrivilege(ctx context.Context, in *HasPrivilegeReq, opts ...client.CallOption) (*HasPrivilegeRes, error)
	UserPrivilege(ctx context.Context, in *UserID, opts ...client.CallOption) (*PrivilegeSet, error)
	URLAuthorization(ctx context.Context, in *UserURLPath, opts ...client.CallOption) (*Authorization, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Login(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.Login", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Logout(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.Logout", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Userlist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.Userlist", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Ldapuserlist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.Ldapuserlist", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Userauthorize(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.Userauthorize", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) PrivilegeList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.PrivilegeList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Setuserinfo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.Setuserinfo", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Unregisteruserlist(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.Unregisteruserlist", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Deleteuser(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.Deleteuser", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AuthorizeApplicationList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.AuthorizeApplicationList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UnauthorizeApplicationList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "User.UnauthorizeApplicationList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AuthorizeAppIDList(ctx context.Context, in *UserID, opts ...client.CallOption) (*AppIDList, error) {
	req := c.c.NewRequest(c.name, "User.AuthorizeAppIDList", in)
	out := new(AppIDList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AddAppLink(ctx context.Context, in *AppLink, opts ...client.CallOption) (*LinkRes, error) {
	req := c.c.NewRequest(c.name, "User.AddAppLink", in)
	out := new(LinkRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteAppLink(ctx context.Context, in *AppLink, opts ...client.CallOption) (*LinkRes, error) {
	req := c.c.NewRequest(c.name, "User.DeleteAppLink", in)
	out := new(LinkRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) IfUserHasPrivilege(ctx context.Context, in *HasPrivilegeReq, opts ...client.CallOption) (*HasPrivilegeRes, error) {
	req := c.c.NewRequest(c.name, "User.IfUserHasPrivilege", in)
	out := new(HasPrivilegeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserPrivilege(ctx context.Context, in *UserID, opts ...client.CallOption) (*PrivilegeSet, error) {
	req := c.c.NewRequest(c.name, "User.UserPrivilege", in)
	out := new(PrivilegeSet)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) URLAuthorization(ctx context.Context, in *UserURLPath, opts ...client.CallOption) (*Authorization, error) {
	req := c.c.NewRequest(c.name, "User.URLAuthorization", in)
	out := new(Authorization)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Login(context.Context, *go_api.Request, *go_api.Response) error
	Logout(context.Context, *go_api.Request, *go_api.Response) error
	Userlist(context.Context, *go_api.Request, *go_api.Response) error
	Ldapuserlist(context.Context, *go_api.Request, *go_api.Response) error
	Userauthorize(context.Context, *go_api.Request, *go_api.Response) error
	PrivilegeList(context.Context, *go_api.Request, *go_api.Response) error
	Setuserinfo(context.Context, *go_api.Request, *go_api.Response) error
	Unregisteruserlist(context.Context, *go_api.Request, *go_api.Response) error
	Deleteuser(context.Context, *go_api.Request, *go_api.Response) error
	AuthorizeApplicationList(context.Context, *go_api.Request, *go_api.Response) error
	UnauthorizeApplicationList(context.Context, *go_api.Request, *go_api.Response) error
	AuthorizeAppIDList(context.Context, *UserID, *AppIDList) error
	AddAppLink(context.Context, *AppLink, *LinkRes) error
	DeleteAppLink(context.Context, *AppLink, *LinkRes) error
	IfUserHasPrivilege(context.Context, *HasPrivilegeReq, *HasPrivilegeRes) error
	UserPrivilege(context.Context, *UserID, *PrivilegeSet) error
	URLAuthorization(context.Context, *UserURLPath, *Authorization) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) {
	type user interface {
		Login(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Logout(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Userlist(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Ldapuserlist(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Userauthorize(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		PrivilegeList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Setuserinfo(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Unregisteruserlist(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Deleteuser(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AuthorizeApplicationList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UnauthorizeApplicationList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AuthorizeAppIDList(ctx context.Context, in *UserID, out *AppIDList) error
		AddAppLink(ctx context.Context, in *AppLink, out *LinkRes) error
		DeleteAppLink(ctx context.Context, in *AppLink, out *LinkRes) error
		IfUserHasPrivilege(ctx context.Context, in *HasPrivilegeReq, out *HasPrivilegeRes) error
		UserPrivilege(ctx context.Context, in *UserID, out *PrivilegeSet) error
		URLAuthorization(ctx context.Context, in *UserURLPath, out *Authorization) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Login(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.Login(ctx, in, out)
}

func (h *userHandler) Logout(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.Logout(ctx, in, out)
}

func (h *userHandler) Userlist(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.Userlist(ctx, in, out)
}

func (h *userHandler) Ldapuserlist(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.Ldapuserlist(ctx, in, out)
}

func (h *userHandler) Userauthorize(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.Userauthorize(ctx, in, out)
}

func (h *userHandler) PrivilegeList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.PrivilegeList(ctx, in, out)
}

func (h *userHandler) Setuserinfo(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.Setuserinfo(ctx, in, out)
}

func (h *userHandler) Unregisteruserlist(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.Unregisteruserlist(ctx, in, out)
}

func (h *userHandler) Deleteuser(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.Deleteuser(ctx, in, out)
}

func (h *userHandler) AuthorizeApplicationList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.AuthorizeApplicationList(ctx, in, out)
}

func (h *userHandler) UnauthorizeApplicationList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandler.UnauthorizeApplicationList(ctx, in, out)
}

func (h *userHandler) AuthorizeAppIDList(ctx context.Context, in *UserID, out *AppIDList) error {
	return h.UserHandler.AuthorizeAppIDList(ctx, in, out)
}

func (h *userHandler) AddAppLink(ctx context.Context, in *AppLink, out *LinkRes) error {
	return h.UserHandler.AddAppLink(ctx, in, out)
}

func (h *userHandler) DeleteAppLink(ctx context.Context, in *AppLink, out *LinkRes) error {
	return h.UserHandler.DeleteAppLink(ctx, in, out)
}

func (h *userHandler) IfUserHasPrivilege(ctx context.Context, in *HasPrivilegeReq, out *HasPrivilegeRes) error {
	return h.UserHandler.IfUserHasPrivilege(ctx, in, out)
}

func (h *userHandler) UserPrivilege(ctx context.Context, in *UserID, out *PrivilegeSet) error {
	return h.UserHandler.UserPrivilege(ctx, in, out)
}

func (h *userHandler) URLAuthorization(ctx context.Context, in *UserURLPath, out *Authorization) error {
	return h.UserHandler.URLAuthorization(ctx, in, out)
}

// Client API for Api service

type ApiService interface {
	Login(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*TokenValue, error)
	Logout(ctx context.Context, in *TokenValue, opts ...client.CallOption) (*LinkRes, error)
}

type apiService struct {
	c    client.Client
	name string
}

func NewApiService(name string, c client.Client) ApiService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "api"
	}
	return &apiService{
		c:    c,
		name: name,
	}
}

func (c *apiService) Login(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*TokenValue, error) {
	req := c.c.NewRequest(c.name, "Api.Login", in)
	out := new(TokenValue)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiService) Logout(ctx context.Context, in *TokenValue, opts ...client.CallOption) (*LinkRes, error) {
	req := c.c.NewRequest(c.name, "Api.Logout", in)
	out := new(LinkRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiHandler interface {
	Login(context.Context, *UserInfo, *TokenValue) error
	Logout(context.Context, *TokenValue, *LinkRes) error
}

func RegisterApiHandler(s server.Server, hdlr ApiHandler, opts ...server.HandlerOption) {
	type api interface {
		Login(ctx context.Context, in *UserInfo, out *TokenValue) error
		Logout(ctx context.Context, in *TokenValue, out *LinkRes) error
	}
	type Api struct {
		api
	}
	h := &apiHandler{hdlr}
	s.Handle(s.NewHandler(&Api{h}, opts...))
}

type apiHandler struct {
	ApiHandler
}

func (h *apiHandler) Login(ctx context.Context, in *UserInfo, out *TokenValue) error {
	return h.ApiHandler.Login(ctx, in, out)
}

func (h *apiHandler) Logout(ctx context.Context, in *TokenValue, out *LinkRes) error {
	return h.ApiHandler.Logout(ctx, in, out)
}
