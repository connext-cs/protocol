// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: businesscenter.proto

package businesscenter

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Businesscenter service

type BusinesscenterService interface {
	NewApp(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	UpdateApp(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	QueryApp(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	QueryAppByParentID(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	DeleteApp(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	ListApp(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	ParentProjectList(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	QueryK8SProParentProjectByTest(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	ListNoLinkParentGroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	FuzzyListParent(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	FuzzyListParentGroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GetAllAppList(ctx context.Context, in *AppParam, opts ...client.CallOption) (*AppList, error)
	RpcQueryAppByParentID(ctx context.Context, in *ParentProjectInfo, opts ...client.CallOption) (*AppInfo, error)
	RPCListApp(ctx context.Context, in *RpcListAppRequest, opts ...client.CallOption) (*RpcListAppResponse, error)
	RPCQueryApp(ctx context.Context, in *RpcQueryAppRequest, opts ...client.CallOption) (*RpcQueryAppResponse, error)
	RPCListAppEnvs(ctx context.Context, in *RpcListAppRequest, opts ...client.CallOption) (*RPCListAppEnvsResponse, error)
}

type businesscenterService struct {
	c    client.Client
	name string
}

func NewBusinesscenterService(name string, c client.Client) BusinesscenterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "businesscenter"
	}
	return &businesscenterService{
		c:    c,
		name: name,
	}
}

func (c *businesscenterService) NewApp(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.NewApp", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) UpdateApp(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.UpdateApp", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) QueryApp(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.QueryApp", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) QueryAppByParentID(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.QueryAppByParentID", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) DeleteApp(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.DeleteApp", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) ListApp(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.ListApp", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) ParentProjectList(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.ParentProjectList", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) QueryK8SProParentProjectByTest(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.QueryK8SProParentProjectByTest", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) ListNoLinkParentGroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.ListNoLinkParentGroup", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) FuzzyListParent(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.FuzzyListParent", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) FuzzyListParentGroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.FuzzyListParentGroup", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) GetAllAppList(ctx context.Context, in *AppParam, opts ...client.CallOption) (*AppList, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.GetAllAppList", in)
	out := new(AppList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) RpcQueryAppByParentID(ctx context.Context, in *ParentProjectInfo, opts ...client.CallOption) (*AppInfo, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.RpcQueryAppByParentID", in)
	out := new(AppInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) RPCListApp(ctx context.Context, in *RpcListAppRequest, opts ...client.CallOption) (*RpcListAppResponse, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.RPCListApp", in)
	out := new(RpcListAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) RPCQueryApp(ctx context.Context, in *RpcQueryAppRequest, opts ...client.CallOption) (*RpcQueryAppResponse, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.RPCQueryApp", in)
	out := new(RpcQueryAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businesscenterService) RPCListAppEnvs(ctx context.Context, in *RpcListAppRequest, opts ...client.CallOption) (*RPCListAppEnvsResponse, error) {
	req := c.c.NewRequest(c.name, "Businesscenter.RPCListAppEnvs", in)
	out := new(RPCListAppEnvsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Businesscenter service

type BusinesscenterHandler interface {
	NewApp(context.Context, *proto1.Request, *proto1.Response) error
	UpdateApp(context.Context, *proto1.Request, *proto1.Response) error
	QueryApp(context.Context, *proto1.Request, *proto1.Response) error
	QueryAppByParentID(context.Context, *proto1.Request, *proto1.Response) error
	DeleteApp(context.Context, *proto1.Request, *proto1.Response) error
	ListApp(context.Context, *proto1.Request, *proto1.Response) error
	ParentProjectList(context.Context, *proto1.Request, *proto1.Response) error
	QueryK8SProParentProjectByTest(context.Context, *proto1.Request, *proto1.Response) error
	ListNoLinkParentGroup(context.Context, *proto1.Request, *proto1.Response) error
	FuzzyListParent(context.Context, *proto1.Request, *proto1.Response) error
	FuzzyListParentGroup(context.Context, *proto1.Request, *proto1.Response) error
	GetAllAppList(context.Context, *AppParam, *AppList) error
	RpcQueryAppByParentID(context.Context, *ParentProjectInfo, *AppInfo) error
	RPCListApp(context.Context, *RpcListAppRequest, *RpcListAppResponse) error
	RPCQueryApp(context.Context, *RpcQueryAppRequest, *RpcQueryAppResponse) error
	RPCListAppEnvs(context.Context, *RpcListAppRequest, *RPCListAppEnvsResponse) error
}

func RegisterBusinesscenterHandler(s server.Server, hdlr BusinesscenterHandler, opts ...server.HandlerOption) error {
	type businesscenter interface {
		NewApp(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		UpdateApp(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		QueryApp(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		QueryAppByParentID(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		DeleteApp(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		ListApp(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		ParentProjectList(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		QueryK8SProParentProjectByTest(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		ListNoLinkParentGroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		FuzzyListParent(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		FuzzyListParentGroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetAllAppList(ctx context.Context, in *AppParam, out *AppList) error
		RpcQueryAppByParentID(ctx context.Context, in *ParentProjectInfo, out *AppInfo) error
		RPCListApp(ctx context.Context, in *RpcListAppRequest, out *RpcListAppResponse) error
		RPCQueryApp(ctx context.Context, in *RpcQueryAppRequest, out *RpcQueryAppResponse) error
		RPCListAppEnvs(ctx context.Context, in *RpcListAppRequest, out *RPCListAppEnvsResponse) error
	}
	type Businesscenter struct {
		businesscenter
	}
	h := &businesscenterHandler{hdlr}
	return s.Handle(s.NewHandler(&Businesscenter{h}, opts...))
}

type businesscenterHandler struct {
	BusinesscenterHandler
}

func (h *businesscenterHandler) NewApp(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.NewApp(ctx, in, out)
}

func (h *businesscenterHandler) UpdateApp(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.UpdateApp(ctx, in, out)
}

func (h *businesscenterHandler) QueryApp(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.QueryApp(ctx, in, out)
}

func (h *businesscenterHandler) QueryAppByParentID(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.QueryAppByParentID(ctx, in, out)
}

func (h *businesscenterHandler) DeleteApp(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.DeleteApp(ctx, in, out)
}

func (h *businesscenterHandler) ListApp(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.ListApp(ctx, in, out)
}

func (h *businesscenterHandler) ParentProjectList(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.ParentProjectList(ctx, in, out)
}

func (h *businesscenterHandler) QueryK8SProParentProjectByTest(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.QueryK8SProParentProjectByTest(ctx, in, out)
}

func (h *businesscenterHandler) ListNoLinkParentGroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.ListNoLinkParentGroup(ctx, in, out)
}

func (h *businesscenterHandler) FuzzyListParent(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.FuzzyListParent(ctx, in, out)
}

func (h *businesscenterHandler) FuzzyListParentGroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.BusinesscenterHandler.FuzzyListParentGroup(ctx, in, out)
}

func (h *businesscenterHandler) GetAllAppList(ctx context.Context, in *AppParam, out *AppList) error {
	return h.BusinesscenterHandler.GetAllAppList(ctx, in, out)
}

func (h *businesscenterHandler) RpcQueryAppByParentID(ctx context.Context, in *ParentProjectInfo, out *AppInfo) error {
	return h.BusinesscenterHandler.RpcQueryAppByParentID(ctx, in, out)
}

func (h *businesscenterHandler) RPCListApp(ctx context.Context, in *RpcListAppRequest, out *RpcListAppResponse) error {
	return h.BusinesscenterHandler.RPCListApp(ctx, in, out)
}

func (h *businesscenterHandler) RPCQueryApp(ctx context.Context, in *RpcQueryAppRequest, out *RpcQueryAppResponse) error {
	return h.BusinesscenterHandler.RPCQueryApp(ctx, in, out)
}

func (h *businesscenterHandler) RPCListAppEnvs(ctx context.Context, in *RpcListAppRequest, out *RPCListAppEnvsResponse) error {
	return h.BusinesscenterHandler.RPCListAppEnvs(ctx, in, out)
}

// Client API for Deploymanage service

type DeploymanageService interface {
	Import(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Query(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type deploymanageService struct {
	c    client.Client
	name string
}

func NewDeploymanageService(name string, c client.Client) DeploymanageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "deploymanage"
	}
	return &deploymanageService{
		c:    c,
		name: name,
	}
}

func (c *deploymanageService) Import(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Deploymanage.Import", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymanageService) Query(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Deploymanage.Query", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Deploymanage service

type DeploymanageHandler interface {
	Import(context.Context, *proto1.Request, *proto1.Response) error
	Query(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterDeploymanageHandler(s server.Server, hdlr DeploymanageHandler, opts ...server.HandlerOption) error {
	type deploymanage interface {
		Import(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Query(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Deploymanage struct {
		deploymanage
	}
	h := &deploymanageHandler{hdlr}
	return s.Handle(s.NewHandler(&Deploymanage{h}, opts...))
}

type deploymanageHandler struct {
	DeploymanageHandler
}

func (h *deploymanageHandler) Import(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.DeploymanageHandler.Import(ctx, in, out)
}

func (h *deploymanageHandler) Query(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.DeploymanageHandler.Query(ctx, in, out)
}
