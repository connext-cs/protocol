// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: parentProject.proto

package parentProject

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ParentProject service

type ParentProjectService interface {
	Add(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	List(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Query(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Update(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	RpcUpdate(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateRes, error)
	Delete(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Exist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	NoneGroupHostList(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	//7 查询主机的分组信息
	QueryParentByHost(ctx context.Context, in *Host, opts ...client.CallOption) (*Group, error)
	//8 从分组中删除主机
	RemoveHostFromParent(ctx context.Context, in *Host, opts ...client.CallOption) (*RemoveResult, error)
	AddHostIntoGroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	RpcList(ctx context.Context, in *RpcListRequest, opts ...client.CallOption) (*RpcListResponse, error)
	RpcQueryList(ctx context.Context, in *RpcQueryListRequest, opts ...client.CallOption) (*RpcQueryListResponse, error)
	RpcQueryListByParentProjectIds(ctx context.Context, in *RpcQueryListByParentProjectIdsReq, opts ...client.CallOption) (*RpcQueryListResponse, error)
	RpcQueryListByParentFuzzyName(ctx context.Context, in *RpcQueryListByParentFuzzyNameReq, opts ...client.CallOption) (*RpcQueryListResponse, error)
	QueryHosts(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type parentProjectService struct {
	c    client.Client
	name string
}

func NewParentProjectService(name string, c client.Client) ParentProjectService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "parentproject"
	}
	return &parentProjectService{
		c:    c,
		name: name,
	}
}

func (c *parentProjectService) Add(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "ParentProject.Add", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) List(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "ParentProject.List", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) Query(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "ParentProject.Query", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) Update(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "ParentProject.Update", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) RpcUpdate(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateRes, error) {
	req := c.c.NewRequest(c.name, "ParentProject.RpcUpdate", in)
	out := new(UpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) Delete(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "ParentProject.Delete", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) Exist(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "ParentProject.Exist", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) NoneGroupHostList(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "ParentProject.NoneGroupHostList", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) QueryParentByHost(ctx context.Context, in *Host, opts ...client.CallOption) (*Group, error) {
	req := c.c.NewRequest(c.name, "ParentProject.QueryParentByHost", in)
	out := new(Group)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) RemoveHostFromParent(ctx context.Context, in *Host, opts ...client.CallOption) (*RemoveResult, error) {
	req := c.c.NewRequest(c.name, "ParentProject.RemoveHostFromParent", in)
	out := new(RemoveResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) AddHostIntoGroup(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "ParentProject.AddHostIntoGroup", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) RpcList(ctx context.Context, in *RpcListRequest, opts ...client.CallOption) (*RpcListResponse, error) {
	req := c.c.NewRequest(c.name, "ParentProject.RpcList", in)
	out := new(RpcListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) RpcQueryList(ctx context.Context, in *RpcQueryListRequest, opts ...client.CallOption) (*RpcQueryListResponse, error) {
	req := c.c.NewRequest(c.name, "ParentProject.RpcQueryList", in)
	out := new(RpcQueryListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) RpcQueryListByParentProjectIds(ctx context.Context, in *RpcQueryListByParentProjectIdsReq, opts ...client.CallOption) (*RpcQueryListResponse, error) {
	req := c.c.NewRequest(c.name, "ParentProject.RpcQueryListByParentProjectIds", in)
	out := new(RpcQueryListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) RpcQueryListByParentFuzzyName(ctx context.Context, in *RpcQueryListByParentFuzzyNameReq, opts ...client.CallOption) (*RpcQueryListResponse, error) {
	req := c.c.NewRequest(c.name, "ParentProject.RpcQueryListByParentFuzzyName", in)
	out := new(RpcQueryListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentProjectService) QueryHosts(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "ParentProject.QueryHosts", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ParentProject service

type ParentProjectHandler interface {
	Add(context.Context, *proto1.Request, *proto1.Response) error
	List(context.Context, *proto1.Request, *proto1.Response) error
	Query(context.Context, *proto1.Request, *proto1.Response) error
	Update(context.Context, *proto1.Request, *proto1.Response) error
	RpcUpdate(context.Context, *UpdateReq, *UpdateRes) error
	Delete(context.Context, *proto1.Request, *proto1.Response) error
	Exist(context.Context, *proto1.Request, *proto1.Response) error
	NoneGroupHostList(context.Context, *proto1.Request, *proto1.Response) error
	//7 查询主机的分组信息
	QueryParentByHost(context.Context, *Host, *Group) error
	//8 从分组中删除主机
	RemoveHostFromParent(context.Context, *Host, *RemoveResult) error
	AddHostIntoGroup(context.Context, *proto1.Request, *proto1.Response) error
	RpcList(context.Context, *RpcListRequest, *RpcListResponse) error
	RpcQueryList(context.Context, *RpcQueryListRequest, *RpcQueryListResponse) error
	RpcQueryListByParentProjectIds(context.Context, *RpcQueryListByParentProjectIdsReq, *RpcQueryListResponse) error
	RpcQueryListByParentFuzzyName(context.Context, *RpcQueryListByParentFuzzyNameReq, *RpcQueryListResponse) error
	QueryHosts(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterParentProjectHandler(s server.Server, hdlr ParentProjectHandler, opts ...server.HandlerOption) error {
	type parentProject interface {
		Add(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		List(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Query(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Update(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		RpcUpdate(ctx context.Context, in *UpdateReq, out *UpdateRes) error
		Delete(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Exist(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		NoneGroupHostList(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		QueryParentByHost(ctx context.Context, in *Host, out *Group) error
		RemoveHostFromParent(ctx context.Context, in *Host, out *RemoveResult) error
		AddHostIntoGroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		RpcList(ctx context.Context, in *RpcListRequest, out *RpcListResponse) error
		RpcQueryList(ctx context.Context, in *RpcQueryListRequest, out *RpcQueryListResponse) error
		RpcQueryListByParentProjectIds(ctx context.Context, in *RpcQueryListByParentProjectIdsReq, out *RpcQueryListResponse) error
		RpcQueryListByParentFuzzyName(ctx context.Context, in *RpcQueryListByParentFuzzyNameReq, out *RpcQueryListResponse) error
		QueryHosts(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type ParentProject struct {
		parentProject
	}
	h := &parentProjectHandler{hdlr}
	return s.Handle(s.NewHandler(&ParentProject{h}, opts...))
}

type parentProjectHandler struct {
	ParentProjectHandler
}

func (h *parentProjectHandler) Add(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ParentProjectHandler.Add(ctx, in, out)
}

func (h *parentProjectHandler) List(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ParentProjectHandler.List(ctx, in, out)
}

func (h *parentProjectHandler) Query(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ParentProjectHandler.Query(ctx, in, out)
}

func (h *parentProjectHandler) Update(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ParentProjectHandler.Update(ctx, in, out)
}

func (h *parentProjectHandler) RpcUpdate(ctx context.Context, in *UpdateReq, out *UpdateRes) error {
	return h.ParentProjectHandler.RpcUpdate(ctx, in, out)
}

func (h *parentProjectHandler) Delete(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ParentProjectHandler.Delete(ctx, in, out)
}

func (h *parentProjectHandler) Exist(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ParentProjectHandler.Exist(ctx, in, out)
}

func (h *parentProjectHandler) NoneGroupHostList(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ParentProjectHandler.NoneGroupHostList(ctx, in, out)
}

func (h *parentProjectHandler) QueryParentByHost(ctx context.Context, in *Host, out *Group) error {
	return h.ParentProjectHandler.QueryParentByHost(ctx, in, out)
}

func (h *parentProjectHandler) RemoveHostFromParent(ctx context.Context, in *Host, out *RemoveResult) error {
	return h.ParentProjectHandler.RemoveHostFromParent(ctx, in, out)
}

func (h *parentProjectHandler) AddHostIntoGroup(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ParentProjectHandler.AddHostIntoGroup(ctx, in, out)
}

func (h *parentProjectHandler) RpcList(ctx context.Context, in *RpcListRequest, out *RpcListResponse) error {
	return h.ParentProjectHandler.RpcList(ctx, in, out)
}

func (h *parentProjectHandler) RpcQueryList(ctx context.Context, in *RpcQueryListRequest, out *RpcQueryListResponse) error {
	return h.ParentProjectHandler.RpcQueryList(ctx, in, out)
}

func (h *parentProjectHandler) RpcQueryListByParentProjectIds(ctx context.Context, in *RpcQueryListByParentProjectIdsReq, out *RpcQueryListResponse) error {
	return h.ParentProjectHandler.RpcQueryListByParentProjectIds(ctx, in, out)
}

func (h *parentProjectHandler) RpcQueryListByParentFuzzyName(ctx context.Context, in *RpcQueryListByParentFuzzyNameReq, out *RpcQueryListResponse) error {
	return h.ParentProjectHandler.RpcQueryListByParentFuzzyName(ctx, in, out)
}

func (h *parentProjectHandler) QueryHosts(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ParentProjectHandler.QueryHosts(ctx, in, out)
}
