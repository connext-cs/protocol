// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: HostService.proto

package HostService

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for HostService service

type HostService interface {
	List(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	RpcList(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*HostList, error)
	Query(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	RpcQuery(ctx context.Context, in *GetHostRequest, opts ...client.CallOption) (*HostInfo, error)
	RpcHosttag(ctx context.Context, in *GetHostRequest, opts ...client.CallOption) (*HostTagList, error)
	Update(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Delete(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Add(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	AgentProgress(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	LinuxAgentInstallCmd(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	WindowsAgentInstallCMD(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	OpenAgent(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	HostJobList(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	HostImport(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	RemoveInspectReportByGroup(ctx context.Context, in *RemoveInspectReportByGroupReq, opts ...client.CallOption) (*EmptyResponse, error)
	RpcAllHostsByIds(ctx context.Context, in *QueryAllHostRequest, opts ...client.CallOption) (*HostList, error)
	GetHostsByNameOrIP(ctx context.Context, in *GetHostsByNameOrIPRequest, opts ...client.CallOption) (*HostList, error)
}

type hostService struct {
	c    client.Client
	name string
}

func NewHostService(name string, c client.Client) HostService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "hostservice"
	}
	return &hostService{
		c:    c,
		name: name,
	}
}

func (c *hostService) List(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.List", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) RpcList(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*HostList, error) {
	req := c.c.NewRequest(c.name, "HostService.RpcList", in)
	out := new(HostList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) Query(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.Query", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) RpcQuery(ctx context.Context, in *GetHostRequest, opts ...client.CallOption) (*HostInfo, error) {
	req := c.c.NewRequest(c.name, "HostService.RpcQuery", in)
	out := new(HostInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) RpcHosttag(ctx context.Context, in *GetHostRequest, opts ...client.CallOption) (*HostTagList, error) {
	req := c.c.NewRequest(c.name, "HostService.RpcHosttag", in)
	out := new(HostTagList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) Update(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.Update", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) Delete(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.Delete", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) Add(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.Add", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) AgentProgress(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.AgentProgress", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) LinuxAgentInstallCmd(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.LinuxAgentInstallCmd", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) WindowsAgentInstallCMD(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.WindowsAgentInstallCMD", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) OpenAgent(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.OpenAgent", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) HostJobList(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.HostJobList", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) HostImport(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "HostService.HostImport", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) RemoveInspectReportByGroup(ctx context.Context, in *RemoveInspectReportByGroupReq, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "HostService.RemoveInspectReportByGroup", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) RpcAllHostsByIds(ctx context.Context, in *QueryAllHostRequest, opts ...client.CallOption) (*HostList, error) {
	req := c.c.NewRequest(c.name, "HostService.RpcAllHostsByIds", in)
	out := new(HostList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostService) GetHostsByNameOrIP(ctx context.Context, in *GetHostsByNameOrIPRequest, opts ...client.CallOption) (*HostList, error) {
	req := c.c.NewRequest(c.name, "HostService.GetHostsByNameOrIP", in)
	out := new(HostList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HostService service

type HostServiceHandler interface {
	List(context.Context, *proto1.Request, *proto1.Response) error
	RpcList(context.Context, *EmptyRequest, *HostList) error
	Query(context.Context, *proto1.Request, *proto1.Response) error
	RpcQuery(context.Context, *GetHostRequest, *HostInfo) error
	RpcHosttag(context.Context, *GetHostRequest, *HostTagList) error
	Update(context.Context, *proto1.Request, *proto1.Response) error
	Delete(context.Context, *proto1.Request, *proto1.Response) error
	Add(context.Context, *proto1.Request, *proto1.Response) error
	AgentProgress(context.Context, *proto1.Request, *proto1.Response) error
	LinuxAgentInstallCmd(context.Context, *proto1.Request, *proto1.Response) error
	WindowsAgentInstallCMD(context.Context, *proto1.Request, *proto1.Response) error
	OpenAgent(context.Context, *proto1.Request, *proto1.Response) error
	HostJobList(context.Context, *proto1.Request, *proto1.Response) error
	HostImport(context.Context, *proto1.Request, *proto1.Response) error
	RemoveInspectReportByGroup(context.Context, *RemoveInspectReportByGroupReq, *EmptyResponse) error
	RpcAllHostsByIds(context.Context, *QueryAllHostRequest, *HostList) error
	GetHostsByNameOrIP(context.Context, *GetHostsByNameOrIPRequest, *HostList) error
}

func RegisterHostServiceHandler(s server.Server, hdlr HostServiceHandler, opts ...server.HandlerOption) error {
	type hostService interface {
		List(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		RpcList(ctx context.Context, in *EmptyRequest, out *HostList) error
		Query(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		RpcQuery(ctx context.Context, in *GetHostRequest, out *HostInfo) error
		RpcHosttag(ctx context.Context, in *GetHostRequest, out *HostTagList) error
		Update(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Delete(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Add(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		AgentProgress(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		LinuxAgentInstallCmd(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		WindowsAgentInstallCMD(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		OpenAgent(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		HostJobList(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		HostImport(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		RemoveInspectReportByGroup(ctx context.Context, in *RemoveInspectReportByGroupReq, out *EmptyResponse) error
		RpcAllHostsByIds(ctx context.Context, in *QueryAllHostRequest, out *HostList) error
		GetHostsByNameOrIP(ctx context.Context, in *GetHostsByNameOrIPRequest, out *HostList) error
	}
	type HostService struct {
		hostService
	}
	h := &hostServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HostService{h}, opts...))
}

type hostServiceHandler struct {
	HostServiceHandler
}

func (h *hostServiceHandler) List(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.List(ctx, in, out)
}

func (h *hostServiceHandler) RpcList(ctx context.Context, in *EmptyRequest, out *HostList) error {
	return h.HostServiceHandler.RpcList(ctx, in, out)
}

func (h *hostServiceHandler) Query(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.Query(ctx, in, out)
}

func (h *hostServiceHandler) RpcQuery(ctx context.Context, in *GetHostRequest, out *HostInfo) error {
	return h.HostServiceHandler.RpcQuery(ctx, in, out)
}

func (h *hostServiceHandler) RpcHosttag(ctx context.Context, in *GetHostRequest, out *HostTagList) error {
	return h.HostServiceHandler.RpcHosttag(ctx, in, out)
}

func (h *hostServiceHandler) Update(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.Update(ctx, in, out)
}

func (h *hostServiceHandler) Delete(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.Delete(ctx, in, out)
}

func (h *hostServiceHandler) Add(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.Add(ctx, in, out)
}

func (h *hostServiceHandler) AgentProgress(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.AgentProgress(ctx, in, out)
}

func (h *hostServiceHandler) LinuxAgentInstallCmd(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.LinuxAgentInstallCmd(ctx, in, out)
}

func (h *hostServiceHandler) WindowsAgentInstallCMD(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.WindowsAgentInstallCMD(ctx, in, out)
}

func (h *hostServiceHandler) OpenAgent(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.OpenAgent(ctx, in, out)
}

func (h *hostServiceHandler) HostJobList(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.HostJobList(ctx, in, out)
}

func (h *hostServiceHandler) HostImport(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HostServiceHandler.HostImport(ctx, in, out)
}

func (h *hostServiceHandler) RemoveInspectReportByGroup(ctx context.Context, in *RemoveInspectReportByGroupReq, out *EmptyResponse) error {
	return h.HostServiceHandler.RemoveInspectReportByGroup(ctx, in, out)
}

func (h *hostServiceHandler) RpcAllHostsByIds(ctx context.Context, in *QueryAllHostRequest, out *HostList) error {
	return h.HostServiceHandler.RpcAllHostsByIds(ctx, in, out)
}

func (h *hostServiceHandler) GetHostsByNameOrIP(ctx context.Context, in *GetHostsByNameOrIPRequest, out *HostList) error {
	return h.HostServiceHandler.GetHostsByNameOrIP(ctx, in, out)
}
